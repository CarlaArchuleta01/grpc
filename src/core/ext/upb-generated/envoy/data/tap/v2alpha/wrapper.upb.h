/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/data/tap/v2alpha/wrapper.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_DATA_TAP_V2ALPHA_WRAPPER_PROTO_UPB_H_
#define ENVOY_DATA_TAP_V2ALPHA_WRAPPER_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_data_tap_v2alpha_TraceWrapper;
typedef struct envoy_data_tap_v2alpha_TraceWrapper envoy_data_tap_v2alpha_TraceWrapper;
extern const upb_msglayout envoy_data_tap_v2alpha_TraceWrapper_msginit;
struct envoy_data_tap_v2alpha_HttpBufferedTrace;
struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment;
struct envoy_data_tap_v2alpha_SocketBufferedTrace;
struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment;
extern const upb_msglayout envoy_data_tap_v2alpha_HttpBufferedTrace_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketBufferedTrace_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit;


/* envoy.data.tap.v2alpha.TraceWrapper */

UPB_INLINE envoy_data_tap_v2alpha_TraceWrapper *envoy_data_tap_v2alpha_TraceWrapper_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_TraceWrapper *)_upb_msg_new(&envoy_data_tap_v2alpha_TraceWrapper_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_TraceWrapper *envoy_data_tap_v2alpha_TraceWrapper_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_TraceWrapper *ret = envoy_data_tap_v2alpha_TraceWrapper_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_TraceWrapper_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_TraceWrapper *envoy_data_tap_v2alpha_TraceWrapper_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_TraceWrapper *ret = envoy_data_tap_v2alpha_TraceWrapper_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_TraceWrapper_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_TraceWrapper_serialize(const envoy_data_tap_v2alpha_TraceWrapper *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_TraceWrapper_msginit, arena, len);
}

typedef enum {
  envoy_data_tap_v2alpha_TraceWrapper_trace_http_buffered_trace = 1,
  envoy_data_tap_v2alpha_TraceWrapper_trace_http_streamed_trace_segment = 2,
  envoy_data_tap_v2alpha_TraceWrapper_trace_socket_buffered_trace = 3,
  envoy_data_tap_v2alpha_TraceWrapper_trace_socket_streamed_trace_segment = 4,
  envoy_data_tap_v2alpha_TraceWrapper_trace_NOT_SET = 0
} envoy_data_tap_v2alpha_TraceWrapper_trace_oneofcases;
UPB_INLINE envoy_data_tap_v2alpha_TraceWrapper_trace_oneofcases envoy_data_tap_v2alpha_TraceWrapper_trace_case(const envoy_data_tap_v2alpha_TraceWrapper* msg) { return (envoy_data_tap_v2alpha_TraceWrapper_trace_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(4, 8), int32_t); }

UPB_INLINE bool envoy_data_tap_v2alpha_TraceWrapper_has_http_buffered_trace(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 1; }
UPB_INLINE const struct envoy_data_tap_v2alpha_HttpBufferedTrace* envoy_data_tap_v2alpha_TraceWrapper_http_buffered_trace(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return UPB_READ_ONEOF(msg, const struct envoy_data_tap_v2alpha_HttpBufferedTrace*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 1, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_TraceWrapper_has_http_streamed_trace_segment(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 2; }
UPB_INLINE const struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment* envoy_data_tap_v2alpha_TraceWrapper_http_streamed_trace_segment(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return UPB_READ_ONEOF(msg, const struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 2, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_TraceWrapper_has_socket_buffered_trace(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 3; }
UPB_INLINE const struct envoy_data_tap_v2alpha_SocketBufferedTrace* envoy_data_tap_v2alpha_TraceWrapper_socket_buffered_trace(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return UPB_READ_ONEOF(msg, const struct envoy_data_tap_v2alpha_SocketBufferedTrace*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 3, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_TraceWrapper_has_socket_streamed_trace_segment(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 4; }
UPB_INLINE const struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment* envoy_data_tap_v2alpha_TraceWrapper_socket_streamed_trace_segment(const envoy_data_tap_v2alpha_TraceWrapper *msg) { return UPB_READ_ONEOF(msg, const struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 4, NULL); }

UPB_INLINE void envoy_data_tap_v2alpha_TraceWrapper_set_http_buffered_trace(envoy_data_tap_v2alpha_TraceWrapper *msg, struct envoy_data_tap_v2alpha_HttpBufferedTrace* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_data_tap_v2alpha_HttpBufferedTrace*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 1);
}
UPB_INLINE struct envoy_data_tap_v2alpha_HttpBufferedTrace* envoy_data_tap_v2alpha_TraceWrapper_mutable_http_buffered_trace(envoy_data_tap_v2alpha_TraceWrapper *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_HttpBufferedTrace* sub = (struct envoy_data_tap_v2alpha_HttpBufferedTrace*)envoy_data_tap_v2alpha_TraceWrapper_http_buffered_trace(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_HttpBufferedTrace*)_upb_msg_new(&envoy_data_tap_v2alpha_HttpBufferedTrace_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_TraceWrapper_set_http_buffered_trace(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_TraceWrapper_set_http_streamed_trace_segment(envoy_data_tap_v2alpha_TraceWrapper *msg, struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 2);
}
UPB_INLINE struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment* envoy_data_tap_v2alpha_TraceWrapper_mutable_http_streamed_trace_segment(envoy_data_tap_v2alpha_TraceWrapper *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment* sub = (struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment*)envoy_data_tap_v2alpha_TraceWrapper_http_streamed_trace_segment(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment*)_upb_msg_new(&envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_TraceWrapper_set_http_streamed_trace_segment(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_TraceWrapper_set_socket_buffered_trace(envoy_data_tap_v2alpha_TraceWrapper *msg, struct envoy_data_tap_v2alpha_SocketBufferedTrace* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_data_tap_v2alpha_SocketBufferedTrace*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 3);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketBufferedTrace* envoy_data_tap_v2alpha_TraceWrapper_mutable_socket_buffered_trace(envoy_data_tap_v2alpha_TraceWrapper *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketBufferedTrace* sub = (struct envoy_data_tap_v2alpha_SocketBufferedTrace*)envoy_data_tap_v2alpha_TraceWrapper_socket_buffered_trace(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_SocketBufferedTrace*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketBufferedTrace_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_TraceWrapper_set_socket_buffered_trace(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_TraceWrapper_set_socket_streamed_trace_segment(envoy_data_tap_v2alpha_TraceWrapper *msg, struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 4);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment* envoy_data_tap_v2alpha_TraceWrapper_mutable_socket_streamed_trace_segment(envoy_data_tap_v2alpha_TraceWrapper *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment* sub = (struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment*)envoy_data_tap_v2alpha_TraceWrapper_socket_streamed_trace_segment(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_TraceWrapper_set_socket_streamed_trace_segment(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_data_tap_v2alpha_wrapper_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_DATA_TAP_V2ALPHA_WRAPPER_PROTO_UPB_H_ */
