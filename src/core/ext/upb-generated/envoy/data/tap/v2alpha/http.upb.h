/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/data/tap/v2alpha/http.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_DATA_TAP_V2ALPHA_HTTP_PROTO_UPB_H_
#define ENVOY_DATA_TAP_V2ALPHA_HTTP_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_data_tap_v2alpha_HttpBufferedTrace;
struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message;
struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment;
typedef struct envoy_data_tap_v2alpha_HttpBufferedTrace envoy_data_tap_v2alpha_HttpBufferedTrace;
typedef struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message envoy_data_tap_v2alpha_HttpBufferedTrace_Message;
typedef struct envoy_data_tap_v2alpha_HttpStreamedTraceSegment envoy_data_tap_v2alpha_HttpStreamedTraceSegment;
extern const upb_msglayout envoy_data_tap_v2alpha_HttpBufferedTrace_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit;
struct envoy_api_v2_core_HeaderMap;
struct envoy_api_v2_core_HeaderValue;
struct envoy_data_tap_v2alpha_Body;
extern const upb_msglayout envoy_api_v2_core_HeaderMap_msginit;
extern const upb_msglayout envoy_api_v2_core_HeaderValue_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_Body_msginit;


/* envoy.data.tap.v2alpha.HttpBufferedTrace */

UPB_INLINE envoy_data_tap_v2alpha_HttpBufferedTrace *envoy_data_tap_v2alpha_HttpBufferedTrace_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_HttpBufferedTrace *)_upb_msg_new(&envoy_data_tap_v2alpha_HttpBufferedTrace_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_HttpBufferedTrace *envoy_data_tap_v2alpha_HttpBufferedTrace_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_HttpBufferedTrace *ret = envoy_data_tap_v2alpha_HttpBufferedTrace_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_HttpBufferedTrace_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_HttpBufferedTrace *envoy_data_tap_v2alpha_HttpBufferedTrace_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_HttpBufferedTrace *ret = envoy_data_tap_v2alpha_HttpBufferedTrace_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_HttpBufferedTrace_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_HttpBufferedTrace_serialize(const envoy_data_tap_v2alpha_HttpBufferedTrace *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_HttpBufferedTrace_msginit, arena, len);
}

UPB_INLINE bool envoy_data_tap_v2alpha_HttpBufferedTrace_has_request(const envoy_data_tap_v2alpha_HttpBufferedTrace *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const envoy_data_tap_v2alpha_HttpBufferedTrace_Message* envoy_data_tap_v2alpha_HttpBufferedTrace_request(const envoy_data_tap_v2alpha_HttpBufferedTrace *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const envoy_data_tap_v2alpha_HttpBufferedTrace_Message*); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpBufferedTrace_has_response(const envoy_data_tap_v2alpha_HttpBufferedTrace *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const envoy_data_tap_v2alpha_HttpBufferedTrace_Message* envoy_data_tap_v2alpha_HttpBufferedTrace_response(const envoy_data_tap_v2alpha_HttpBufferedTrace *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const envoy_data_tap_v2alpha_HttpBufferedTrace_Message*); }

UPB_INLINE void envoy_data_tap_v2alpha_HttpBufferedTrace_set_request(envoy_data_tap_v2alpha_HttpBufferedTrace *msg, envoy_data_tap_v2alpha_HttpBufferedTrace_Message* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), envoy_data_tap_v2alpha_HttpBufferedTrace_Message*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message* envoy_data_tap_v2alpha_HttpBufferedTrace_mutable_request(envoy_data_tap_v2alpha_HttpBufferedTrace *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message* sub = (struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message*)envoy_data_tap_v2alpha_HttpBufferedTrace_request(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message*)_upb_msg_new(&envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpBufferedTrace_set_request(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpBufferedTrace_set_response(envoy_data_tap_v2alpha_HttpBufferedTrace *msg, envoy_data_tap_v2alpha_HttpBufferedTrace_Message* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), envoy_data_tap_v2alpha_HttpBufferedTrace_Message*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message* envoy_data_tap_v2alpha_HttpBufferedTrace_mutable_response(envoy_data_tap_v2alpha_HttpBufferedTrace *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message* sub = (struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message*)envoy_data_tap_v2alpha_HttpBufferedTrace_response(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_HttpBufferedTrace_Message*)_upb_msg_new(&envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpBufferedTrace_set_response(msg, sub);
  }
  return sub;
}

/* envoy.data.tap.v2alpha.HttpBufferedTrace.Message */

UPB_INLINE envoy_data_tap_v2alpha_HttpBufferedTrace_Message *envoy_data_tap_v2alpha_HttpBufferedTrace_Message_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_HttpBufferedTrace_Message *)_upb_msg_new(&envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_HttpBufferedTrace_Message *envoy_data_tap_v2alpha_HttpBufferedTrace_Message_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_HttpBufferedTrace_Message *ret = envoy_data_tap_v2alpha_HttpBufferedTrace_Message_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_HttpBufferedTrace_Message *envoy_data_tap_v2alpha_HttpBufferedTrace_Message_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_HttpBufferedTrace_Message *ret = envoy_data_tap_v2alpha_HttpBufferedTrace_Message_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_HttpBufferedTrace_Message_serialize(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_HttpBufferedTrace_Message_msginit, arena, len);
}

UPB_INLINE bool envoy_data_tap_v2alpha_HttpBufferedTrace_Message_has_headers(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const struct envoy_api_v2_core_HeaderValue* const* envoy_data_tap_v2alpha_HttpBufferedTrace_Message_headers(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, size_t *len) { return (const struct envoy_api_v2_core_HeaderValue* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpBufferedTrace_Message_has_body(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_HttpBufferedTrace_Message_body(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_data_tap_v2alpha_Body*); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpBufferedTrace_Message_has_trailers(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(12, 24)); }
UPB_INLINE const struct envoy_api_v2_core_HeaderValue* const* envoy_data_tap_v2alpha_HttpBufferedTrace_Message_trailers(const envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, size_t *len) { return (const struct envoy_api_v2_core_HeaderValue* const*)_upb_array_accessor(msg, UPB_SIZE(12, 24), len); }

UPB_INLINE struct envoy_api_v2_core_HeaderValue** envoy_data_tap_v2alpha_HttpBufferedTrace_Message_mutable_headers(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, size_t *len) {
  return (struct envoy_api_v2_core_HeaderValue**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE struct envoy_api_v2_core_HeaderValue** envoy_data_tap_v2alpha_HttpBufferedTrace_Message_resize_headers(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_core_HeaderValue**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_core_HeaderValue* envoy_data_tap_v2alpha_HttpBufferedTrace_Message_add_headers(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, upb_arena *arena) {
  struct envoy_api_v2_core_HeaderValue* sub = (struct envoy_api_v2_core_HeaderValue*)_upb_msg_new(&envoy_api_v2_core_HeaderValue_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpBufferedTrace_Message_set_body(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, struct envoy_data_tap_v2alpha_Body* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_data_tap_v2alpha_Body*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_HttpBufferedTrace_Message_mutable_body(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Body* sub = (struct envoy_data_tap_v2alpha_Body*)envoy_data_tap_v2alpha_HttpBufferedTrace_Message_body(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Body*)_upb_msg_new(&envoy_data_tap_v2alpha_Body_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpBufferedTrace_Message_set_body(msg, sub);
  }
  return sub;
}
UPB_INLINE struct envoy_api_v2_core_HeaderValue** envoy_data_tap_v2alpha_HttpBufferedTrace_Message_mutable_trailers(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, size_t *len) {
  return (struct envoy_api_v2_core_HeaderValue**)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE struct envoy_api_v2_core_HeaderValue** envoy_data_tap_v2alpha_HttpBufferedTrace_Message_resize_trailers(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_core_HeaderValue**)_upb_array_resize_accessor2(msg, UPB_SIZE(12, 24), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_core_HeaderValue* envoy_data_tap_v2alpha_HttpBufferedTrace_Message_add_trailers(envoy_data_tap_v2alpha_HttpBufferedTrace_Message *msg, upb_arena *arena) {
  struct envoy_api_v2_core_HeaderValue* sub = (struct envoy_api_v2_core_HeaderValue*)_upb_msg_new(&envoy_api_v2_core_HeaderValue_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(12, 24), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.data.tap.v2alpha.HttpStreamedTraceSegment */

UPB_INLINE envoy_data_tap_v2alpha_HttpStreamedTraceSegment *envoy_data_tap_v2alpha_HttpStreamedTraceSegment_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_HttpStreamedTraceSegment *)_upb_msg_new(&envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_HttpStreamedTraceSegment *envoy_data_tap_v2alpha_HttpStreamedTraceSegment_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment *ret = envoy_data_tap_v2alpha_HttpStreamedTraceSegment_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_HttpStreamedTraceSegment *envoy_data_tap_v2alpha_HttpStreamedTraceSegment_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment *ret = envoy_data_tap_v2alpha_HttpStreamedTraceSegment_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_HttpStreamedTraceSegment_serialize(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_HttpStreamedTraceSegment_msginit, arena, len);
}

typedef enum {
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_request_headers = 2,
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_request_body_chunk = 3,
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_request_trailers = 4,
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_response_headers = 5,
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_response_body_chunk = 6,
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_response_trailers = 7,
  envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_NOT_SET = 0
} envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_oneofcases;
UPB_INLINE envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_oneofcases envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_case(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment* msg) { return (envoy_data_tap_v2alpha_HttpStreamedTraceSegment_message_piece_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(12, 16), int32_t); }

UPB_INLINE uint64_t envoy_data_tap_v2alpha_HttpStreamedTraceSegment_trace_id(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpStreamedTraceSegment_has_request_headers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 2; }
UPB_INLINE const struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_request_headers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 2, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpStreamedTraceSegment_has_request_body_chunk(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 3; }
UPB_INLINE const struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_request_body_chunk(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const struct envoy_data_tap_v2alpha_Body*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 3, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpStreamedTraceSegment_has_request_trailers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 4; }
UPB_INLINE const struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_request_trailers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 4, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpStreamedTraceSegment_has_response_headers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 5; }
UPB_INLINE const struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_response_headers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 5, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpStreamedTraceSegment_has_response_body_chunk(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 6; }
UPB_INLINE const struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_response_body_chunk(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const struct envoy_data_tap_v2alpha_Body*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 6, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_HttpStreamedTraceSegment_has_response_trailers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 7; }
UPB_INLINE const struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_response_trailers(const envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 7, NULL); }

UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_trace_id(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t) = value;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_request_headers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, struct envoy_api_v2_core_HeaderMap* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 2);
}
UPB_INLINE struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_mutable_request_headers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_api_v2_core_HeaderMap* sub = (struct envoy_api_v2_core_HeaderMap*)envoy_data_tap_v2alpha_HttpStreamedTraceSegment_request_headers(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_HeaderMap*)_upb_msg_new(&envoy_api_v2_core_HeaderMap_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_request_headers(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_request_body_chunk(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, struct envoy_data_tap_v2alpha_Body* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_data_tap_v2alpha_Body*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 3);
}
UPB_INLINE struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_mutable_request_body_chunk(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Body* sub = (struct envoy_data_tap_v2alpha_Body*)envoy_data_tap_v2alpha_HttpStreamedTraceSegment_request_body_chunk(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Body*)_upb_msg_new(&envoy_data_tap_v2alpha_Body_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_request_body_chunk(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_request_trailers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, struct envoy_api_v2_core_HeaderMap* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 4);
}
UPB_INLINE struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_mutable_request_trailers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_api_v2_core_HeaderMap* sub = (struct envoy_api_v2_core_HeaderMap*)envoy_data_tap_v2alpha_HttpStreamedTraceSegment_request_trailers(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_HeaderMap*)_upb_msg_new(&envoy_api_v2_core_HeaderMap_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_request_trailers(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_response_headers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, struct envoy_api_v2_core_HeaderMap* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 5);
}
UPB_INLINE struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_mutable_response_headers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_api_v2_core_HeaderMap* sub = (struct envoy_api_v2_core_HeaderMap*)envoy_data_tap_v2alpha_HttpStreamedTraceSegment_response_headers(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_HeaderMap*)_upb_msg_new(&envoy_api_v2_core_HeaderMap_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_response_headers(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_response_body_chunk(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, struct envoy_data_tap_v2alpha_Body* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_data_tap_v2alpha_Body*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 6);
}
UPB_INLINE struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_mutable_response_body_chunk(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Body* sub = (struct envoy_data_tap_v2alpha_Body*)envoy_data_tap_v2alpha_HttpStreamedTraceSegment_response_body_chunk(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Body*)_upb_msg_new(&envoy_data_tap_v2alpha_Body_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_response_body_chunk(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_response_trailers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, struct envoy_api_v2_core_HeaderMap* value) {
  UPB_WRITE_ONEOF(msg, struct envoy_api_v2_core_HeaderMap*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 7);
}
UPB_INLINE struct envoy_api_v2_core_HeaderMap* envoy_data_tap_v2alpha_HttpStreamedTraceSegment_mutable_response_trailers(envoy_data_tap_v2alpha_HttpStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_api_v2_core_HeaderMap* sub = (struct envoy_api_v2_core_HeaderMap*)envoy_data_tap_v2alpha_HttpStreamedTraceSegment_response_trailers(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_HeaderMap*)_upb_msg_new(&envoy_api_v2_core_HeaderMap_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_HttpStreamedTraceSegment_set_response_trailers(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_data_tap_v2alpha_http_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_DATA_TAP_V2ALPHA_HTTP_PROTO_UPB_H_ */
