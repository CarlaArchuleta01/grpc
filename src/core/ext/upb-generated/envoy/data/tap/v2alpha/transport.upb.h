/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/data/tap/v2alpha/transport.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_DATA_TAP_V2ALPHA_TRANSPORT_PROTO_UPB_H_
#define ENVOY_DATA_TAP_V2ALPHA_TRANSPORT_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_data_tap_v2alpha_Connection;
struct envoy_data_tap_v2alpha_SocketEvent;
struct envoy_data_tap_v2alpha_SocketEvent_Read;
struct envoy_data_tap_v2alpha_SocketEvent_Write;
struct envoy_data_tap_v2alpha_SocketEvent_Closed;
struct envoy_data_tap_v2alpha_SocketBufferedTrace;
struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment;
typedef struct envoy_data_tap_v2alpha_Connection envoy_data_tap_v2alpha_Connection;
typedef struct envoy_data_tap_v2alpha_SocketEvent envoy_data_tap_v2alpha_SocketEvent;
typedef struct envoy_data_tap_v2alpha_SocketEvent_Read envoy_data_tap_v2alpha_SocketEvent_Read;
typedef struct envoy_data_tap_v2alpha_SocketEvent_Write envoy_data_tap_v2alpha_SocketEvent_Write;
typedef struct envoy_data_tap_v2alpha_SocketEvent_Closed envoy_data_tap_v2alpha_SocketEvent_Closed;
typedef struct envoy_data_tap_v2alpha_SocketBufferedTrace envoy_data_tap_v2alpha_SocketBufferedTrace;
typedef struct envoy_data_tap_v2alpha_SocketStreamedTraceSegment envoy_data_tap_v2alpha_SocketStreamedTraceSegment;
extern const upb_msglayout envoy_data_tap_v2alpha_Connection_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketEvent_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketEvent_Read_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketEvent_Write_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketEvent_Closed_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketBufferedTrace_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit;
struct envoy_api_v2_core_Address;
struct envoy_data_tap_v2alpha_Body;
struct google_protobuf_Timestamp;
extern const upb_msglayout envoy_api_v2_core_Address_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_Body_msginit;
extern const upb_msglayout google_protobuf_Timestamp_msginit;


/* envoy.data.tap.v2alpha.Connection */

UPB_INLINE envoy_data_tap_v2alpha_Connection *envoy_data_tap_v2alpha_Connection_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_Connection *)_upb_msg_new(&envoy_data_tap_v2alpha_Connection_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_Connection *envoy_data_tap_v2alpha_Connection_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_Connection *ret = envoy_data_tap_v2alpha_Connection_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_Connection_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_Connection *envoy_data_tap_v2alpha_Connection_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_Connection *ret = envoy_data_tap_v2alpha_Connection_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_Connection_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_Connection_serialize(const envoy_data_tap_v2alpha_Connection *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_Connection_msginit, arena, len);
}

UPB_INLINE bool envoy_data_tap_v2alpha_Connection_has_local_address(const envoy_data_tap_v2alpha_Connection *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_Address* envoy_data_tap_v2alpha_Connection_local_address(const envoy_data_tap_v2alpha_Connection *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_api_v2_core_Address*); }
UPB_INLINE bool envoy_data_tap_v2alpha_Connection_has_remote_address(const envoy_data_tap_v2alpha_Connection *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct envoy_api_v2_core_Address* envoy_data_tap_v2alpha_Connection_remote_address(const envoy_data_tap_v2alpha_Connection *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct envoy_api_v2_core_Address*); }

UPB_INLINE void envoy_data_tap_v2alpha_Connection_set_local_address(envoy_data_tap_v2alpha_Connection *msg, struct envoy_api_v2_core_Address* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_api_v2_core_Address*) = value;
}
UPB_INLINE struct envoy_api_v2_core_Address* envoy_data_tap_v2alpha_Connection_mutable_local_address(envoy_data_tap_v2alpha_Connection *msg, upb_arena *arena) {
  struct envoy_api_v2_core_Address* sub = (struct envoy_api_v2_core_Address*)envoy_data_tap_v2alpha_Connection_local_address(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_Address*)_upb_msg_new(&envoy_api_v2_core_Address_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_Connection_set_local_address(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_Connection_set_remote_address(envoy_data_tap_v2alpha_Connection *msg, struct envoy_api_v2_core_Address* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct envoy_api_v2_core_Address*) = value;
}
UPB_INLINE struct envoy_api_v2_core_Address* envoy_data_tap_v2alpha_Connection_mutable_remote_address(envoy_data_tap_v2alpha_Connection *msg, upb_arena *arena) {
  struct envoy_api_v2_core_Address* sub = (struct envoy_api_v2_core_Address*)envoy_data_tap_v2alpha_Connection_remote_address(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_Address*)_upb_msg_new(&envoy_api_v2_core_Address_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_Connection_set_remote_address(msg, sub);
  }
  return sub;
}

/* envoy.data.tap.v2alpha.SocketEvent */

UPB_INLINE envoy_data_tap_v2alpha_SocketEvent *envoy_data_tap_v2alpha_SocketEvent_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketEvent *)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent *envoy_data_tap_v2alpha_SocketEvent_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent *ret = envoy_data_tap_v2alpha_SocketEvent_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent *envoy_data_tap_v2alpha_SocketEvent_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent *ret = envoy_data_tap_v2alpha_SocketEvent_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_SocketEvent_serialize(const envoy_data_tap_v2alpha_SocketEvent *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_SocketEvent_msginit, arena, len);
}

typedef enum {
  envoy_data_tap_v2alpha_SocketEvent_event_selector_read = 2,
  envoy_data_tap_v2alpha_SocketEvent_event_selector_write = 3,
  envoy_data_tap_v2alpha_SocketEvent_event_selector_closed = 4,
  envoy_data_tap_v2alpha_SocketEvent_event_selector_NOT_SET = 0
} envoy_data_tap_v2alpha_SocketEvent_event_selector_oneofcases;
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_event_selector_oneofcases envoy_data_tap_v2alpha_SocketEvent_event_selector_case(const envoy_data_tap_v2alpha_SocketEvent* msg) { return (envoy_data_tap_v2alpha_SocketEvent_event_selector_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(12, 24), int32_t); }

UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_has_timestamp(const envoy_data_tap_v2alpha_SocketEvent *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_data_tap_v2alpha_SocketEvent_timestamp(const envoy_data_tap_v2alpha_SocketEvent *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Timestamp*); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_has_read(const envoy_data_tap_v2alpha_SocketEvent *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 2; }
UPB_INLINE const envoy_data_tap_v2alpha_SocketEvent_Read* envoy_data_tap_v2alpha_SocketEvent_read(const envoy_data_tap_v2alpha_SocketEvent *msg) { return UPB_READ_ONEOF(msg, const envoy_data_tap_v2alpha_SocketEvent_Read*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 2, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_has_write(const envoy_data_tap_v2alpha_SocketEvent *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 3; }
UPB_INLINE const envoy_data_tap_v2alpha_SocketEvent_Write* envoy_data_tap_v2alpha_SocketEvent_write(const envoy_data_tap_v2alpha_SocketEvent *msg) { return UPB_READ_ONEOF(msg, const envoy_data_tap_v2alpha_SocketEvent_Write*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 3, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_has_closed(const envoy_data_tap_v2alpha_SocketEvent *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 4; }
UPB_INLINE const envoy_data_tap_v2alpha_SocketEvent_Closed* envoy_data_tap_v2alpha_SocketEvent_closed(const envoy_data_tap_v2alpha_SocketEvent *msg) { return UPB_READ_ONEOF(msg, const envoy_data_tap_v2alpha_SocketEvent_Closed*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 4, NULL); }

UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_set_timestamp(envoy_data_tap_v2alpha_SocketEvent *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_data_tap_v2alpha_SocketEvent_mutable_timestamp(envoy_data_tap_v2alpha_SocketEvent *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_data_tap_v2alpha_SocketEvent_timestamp(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketEvent_set_timestamp(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_set_read(envoy_data_tap_v2alpha_SocketEvent *msg, envoy_data_tap_v2alpha_SocketEvent_Read* value) {
  UPB_WRITE_ONEOF(msg, envoy_data_tap_v2alpha_SocketEvent_Read*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 2);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketEvent_Read* envoy_data_tap_v2alpha_SocketEvent_mutable_read(envoy_data_tap_v2alpha_SocketEvent *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketEvent_Read* sub = (struct envoy_data_tap_v2alpha_SocketEvent_Read*)envoy_data_tap_v2alpha_SocketEvent_read(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_SocketEvent_Read*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_Read_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketEvent_set_read(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_set_write(envoy_data_tap_v2alpha_SocketEvent *msg, envoy_data_tap_v2alpha_SocketEvent_Write* value) {
  UPB_WRITE_ONEOF(msg, envoy_data_tap_v2alpha_SocketEvent_Write*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 3);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketEvent_Write* envoy_data_tap_v2alpha_SocketEvent_mutable_write(envoy_data_tap_v2alpha_SocketEvent *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketEvent_Write* sub = (struct envoy_data_tap_v2alpha_SocketEvent_Write*)envoy_data_tap_v2alpha_SocketEvent_write(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_SocketEvent_Write*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_Write_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketEvent_set_write(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_set_closed(envoy_data_tap_v2alpha_SocketEvent *msg, envoy_data_tap_v2alpha_SocketEvent_Closed* value) {
  UPB_WRITE_ONEOF(msg, envoy_data_tap_v2alpha_SocketEvent_Closed*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 4);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketEvent_Closed* envoy_data_tap_v2alpha_SocketEvent_mutable_closed(envoy_data_tap_v2alpha_SocketEvent *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketEvent_Closed* sub = (struct envoy_data_tap_v2alpha_SocketEvent_Closed*)envoy_data_tap_v2alpha_SocketEvent_closed(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_SocketEvent_Closed*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_Closed_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketEvent_set_closed(msg, sub);
  }
  return sub;
}

/* envoy.data.tap.v2alpha.SocketEvent.Read */

UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Read *envoy_data_tap_v2alpha_SocketEvent_Read_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketEvent_Read *)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_Read_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Read *envoy_data_tap_v2alpha_SocketEvent_Read_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent_Read *ret = envoy_data_tap_v2alpha_SocketEvent_Read_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_Read_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Read *envoy_data_tap_v2alpha_SocketEvent_Read_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent_Read *ret = envoy_data_tap_v2alpha_SocketEvent_Read_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_Read_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_SocketEvent_Read_serialize(const envoy_data_tap_v2alpha_SocketEvent_Read *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_SocketEvent_Read_msginit, arena, len);
}

UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_Read_has_data(const envoy_data_tap_v2alpha_SocketEvent_Read *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_SocketEvent_Read_data(const envoy_data_tap_v2alpha_SocketEvent_Read *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_data_tap_v2alpha_Body*); }

UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_Read_set_data(envoy_data_tap_v2alpha_SocketEvent_Read *msg, struct envoy_data_tap_v2alpha_Body* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_data_tap_v2alpha_Body*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_SocketEvent_Read_mutable_data(envoy_data_tap_v2alpha_SocketEvent_Read *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Body* sub = (struct envoy_data_tap_v2alpha_Body*)envoy_data_tap_v2alpha_SocketEvent_Read_data(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Body*)_upb_msg_new(&envoy_data_tap_v2alpha_Body_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketEvent_Read_set_data(msg, sub);
  }
  return sub;
}

/* envoy.data.tap.v2alpha.SocketEvent.Write */

UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Write *envoy_data_tap_v2alpha_SocketEvent_Write_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketEvent_Write *)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_Write_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Write *envoy_data_tap_v2alpha_SocketEvent_Write_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent_Write *ret = envoy_data_tap_v2alpha_SocketEvent_Write_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_Write_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Write *envoy_data_tap_v2alpha_SocketEvent_Write_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent_Write *ret = envoy_data_tap_v2alpha_SocketEvent_Write_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_Write_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_SocketEvent_Write_serialize(const envoy_data_tap_v2alpha_SocketEvent_Write *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_SocketEvent_Write_msginit, arena, len);
}

UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_Write_has_data(const envoy_data_tap_v2alpha_SocketEvent_Write *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_SocketEvent_Write_data(const envoy_data_tap_v2alpha_SocketEvent_Write *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_data_tap_v2alpha_Body*); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketEvent_Write_end_stream(const envoy_data_tap_v2alpha_SocketEvent_Write *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool); }

UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_Write_set_data(envoy_data_tap_v2alpha_SocketEvent_Write *msg, struct envoy_data_tap_v2alpha_Body* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_data_tap_v2alpha_Body*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_Body* envoy_data_tap_v2alpha_SocketEvent_Write_mutable_data(envoy_data_tap_v2alpha_SocketEvent_Write *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Body* sub = (struct envoy_data_tap_v2alpha_Body*)envoy_data_tap_v2alpha_SocketEvent_Write_data(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Body*)_upb_msg_new(&envoy_data_tap_v2alpha_Body_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketEvent_Write_set_data(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketEvent_Write_set_end_stream(envoy_data_tap_v2alpha_SocketEvent_Write *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool) = value;
}

/* envoy.data.tap.v2alpha.SocketEvent.Closed */

UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Closed *envoy_data_tap_v2alpha_SocketEvent_Closed_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketEvent_Closed *)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_Closed_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Closed *envoy_data_tap_v2alpha_SocketEvent_Closed_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent_Closed *ret = envoy_data_tap_v2alpha_SocketEvent_Closed_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_Closed_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent_Closed *envoy_data_tap_v2alpha_SocketEvent_Closed_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketEvent_Closed *ret = envoy_data_tap_v2alpha_SocketEvent_Closed_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketEvent_Closed_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_SocketEvent_Closed_serialize(const envoy_data_tap_v2alpha_SocketEvent_Closed *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_SocketEvent_Closed_msginit, arena, len);
}



/* envoy.data.tap.v2alpha.SocketBufferedTrace */

UPB_INLINE envoy_data_tap_v2alpha_SocketBufferedTrace *envoy_data_tap_v2alpha_SocketBufferedTrace_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketBufferedTrace *)_upb_msg_new(&envoy_data_tap_v2alpha_SocketBufferedTrace_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketBufferedTrace *envoy_data_tap_v2alpha_SocketBufferedTrace_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketBufferedTrace *ret = envoy_data_tap_v2alpha_SocketBufferedTrace_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketBufferedTrace_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketBufferedTrace *envoy_data_tap_v2alpha_SocketBufferedTrace_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketBufferedTrace *ret = envoy_data_tap_v2alpha_SocketBufferedTrace_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketBufferedTrace_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_SocketBufferedTrace_serialize(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_SocketBufferedTrace_msginit, arena, len);
}

UPB_INLINE uint64_t envoy_data_tap_v2alpha_SocketBufferedTrace_trace_id(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketBufferedTrace_has_connection(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const envoy_data_tap_v2alpha_Connection* envoy_data_tap_v2alpha_SocketBufferedTrace_connection(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 24), const envoy_data_tap_v2alpha_Connection*); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketBufferedTrace_has_events(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(24, 32)); }
UPB_INLINE const envoy_data_tap_v2alpha_SocketEvent* const* envoy_data_tap_v2alpha_SocketBufferedTrace_events(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg, size_t *len) { return (const envoy_data_tap_v2alpha_SocketEvent* const*)_upb_array_accessor(msg, UPB_SIZE(24, 32), len); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketBufferedTrace_read_truncated(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 16), bool); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketBufferedTrace_write_truncated(const envoy_data_tap_v2alpha_SocketBufferedTrace *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(17, 17), bool); }

UPB_INLINE void envoy_data_tap_v2alpha_SocketBufferedTrace_set_trace_id(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t) = value;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketBufferedTrace_set_connection(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, envoy_data_tap_v2alpha_Connection* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 24), envoy_data_tap_v2alpha_Connection*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_Connection* envoy_data_tap_v2alpha_SocketBufferedTrace_mutable_connection(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Connection* sub = (struct envoy_data_tap_v2alpha_Connection*)envoy_data_tap_v2alpha_SocketBufferedTrace_connection(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Connection*)_upb_msg_new(&envoy_data_tap_v2alpha_Connection_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketBufferedTrace_set_connection(msg, sub);
  }
  return sub;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent** envoy_data_tap_v2alpha_SocketBufferedTrace_mutable_events(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, size_t *len) {
  return (envoy_data_tap_v2alpha_SocketEvent**)_upb_array_mutable_accessor(msg, UPB_SIZE(24, 32), len);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketEvent** envoy_data_tap_v2alpha_SocketBufferedTrace_resize_events(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, size_t len, upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketEvent**)_upb_array_resize_accessor2(msg, UPB_SIZE(24, 32), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketEvent* envoy_data_tap_v2alpha_SocketBufferedTrace_add_events(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketEvent* sub = (struct envoy_data_tap_v2alpha_SocketEvent*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(24, 32), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketBufferedTrace_set_read_truncated(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), bool) = value;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketBufferedTrace_set_write_truncated(envoy_data_tap_v2alpha_SocketBufferedTrace *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(17, 17), bool) = value;
}

/* envoy.data.tap.v2alpha.SocketStreamedTraceSegment */

UPB_INLINE envoy_data_tap_v2alpha_SocketStreamedTraceSegment *envoy_data_tap_v2alpha_SocketStreamedTraceSegment_new(upb_arena *arena) {
  return (envoy_data_tap_v2alpha_SocketStreamedTraceSegment *)_upb_msg_new(&envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit, arena);
}
UPB_INLINE envoy_data_tap_v2alpha_SocketStreamedTraceSegment *envoy_data_tap_v2alpha_SocketStreamedTraceSegment_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketStreamedTraceSegment *ret = envoy_data_tap_v2alpha_SocketStreamedTraceSegment_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_data_tap_v2alpha_SocketStreamedTraceSegment *envoy_data_tap_v2alpha_SocketStreamedTraceSegment_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_data_tap_v2alpha_SocketStreamedTraceSegment *ret = envoy_data_tap_v2alpha_SocketStreamedTraceSegment_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_data_tap_v2alpha_SocketStreamedTraceSegment_serialize(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_data_tap_v2alpha_SocketStreamedTraceSegment_msginit, arena, len);
}

typedef enum {
  envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_connection = 2,
  envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_event = 3,
  envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_NOT_SET = 0
} envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_oneofcases;
UPB_INLINE envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_oneofcases envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_case(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment* msg) { return (envoy_data_tap_v2alpha_SocketStreamedTraceSegment_message_piece_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(12, 16), int32_t); }

UPB_INLINE uint64_t envoy_data_tap_v2alpha_SocketStreamedTraceSegment_trace_id(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketStreamedTraceSegment_has_connection(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 2; }
UPB_INLINE const envoy_data_tap_v2alpha_Connection* envoy_data_tap_v2alpha_SocketStreamedTraceSegment_connection(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const envoy_data_tap_v2alpha_Connection*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 2, NULL); }
UPB_INLINE bool envoy_data_tap_v2alpha_SocketStreamedTraceSegment_has_event(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 16)) == 3; }
UPB_INLINE const envoy_data_tap_v2alpha_SocketEvent* envoy_data_tap_v2alpha_SocketStreamedTraceSegment_event(const envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg) { return UPB_READ_ONEOF(msg, const envoy_data_tap_v2alpha_SocketEvent*, UPB_SIZE(8, 8), UPB_SIZE(12, 16), 3, NULL); }

UPB_INLINE void envoy_data_tap_v2alpha_SocketStreamedTraceSegment_set_trace_id(envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t) = value;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketStreamedTraceSegment_set_connection(envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg, envoy_data_tap_v2alpha_Connection* value) {
  UPB_WRITE_ONEOF(msg, envoy_data_tap_v2alpha_Connection*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 2);
}
UPB_INLINE struct envoy_data_tap_v2alpha_Connection* envoy_data_tap_v2alpha_SocketStreamedTraceSegment_mutable_connection(envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_Connection* sub = (struct envoy_data_tap_v2alpha_Connection*)envoy_data_tap_v2alpha_SocketStreamedTraceSegment_connection(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_Connection*)_upb_msg_new(&envoy_data_tap_v2alpha_Connection_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketStreamedTraceSegment_set_connection(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_data_tap_v2alpha_SocketStreamedTraceSegment_set_event(envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg, envoy_data_tap_v2alpha_SocketEvent* value) {
  UPB_WRITE_ONEOF(msg, envoy_data_tap_v2alpha_SocketEvent*, UPB_SIZE(8, 8), value, UPB_SIZE(12, 16), 3);
}
UPB_INLINE struct envoy_data_tap_v2alpha_SocketEvent* envoy_data_tap_v2alpha_SocketStreamedTraceSegment_mutable_event(envoy_data_tap_v2alpha_SocketStreamedTraceSegment *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_SocketEvent* sub = (struct envoy_data_tap_v2alpha_SocketEvent*)envoy_data_tap_v2alpha_SocketStreamedTraceSegment_event(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_SocketEvent*)_upb_msg_new(&envoy_data_tap_v2alpha_SocketEvent_msginit, arena);
    if (!sub) return NULL;
    envoy_data_tap_v2alpha_SocketStreamedTraceSegment_set_event(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_data_tap_v2alpha_transport_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_DATA_TAP_V2ALPHA_TRANSPORT_PROTO_UPB_H_ */
