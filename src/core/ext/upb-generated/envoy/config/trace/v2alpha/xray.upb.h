/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/config/trace/v2alpha/xray.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_CONFIG_TRACE_V2ALPHA_XRAY_PROTO_UPB_H_
#define ENVOY_CONFIG_TRACE_V2ALPHA_XRAY_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_config_trace_v2alpha_XRayConfig;
typedef struct envoy_config_trace_v2alpha_XRayConfig envoy_config_trace_v2alpha_XRayConfig;
extern const upb_msglayout envoy_config_trace_v2alpha_XRayConfig_msginit;
struct envoy_api_v2_core_DataSource;
struct envoy_api_v2_core_SocketAddress;
extern const upb_msglayout envoy_api_v2_core_DataSource_msginit;
extern const upb_msglayout envoy_api_v2_core_SocketAddress_msginit;


/* envoy.config.trace.v2alpha.XRayConfig */

UPB_INLINE envoy_config_trace_v2alpha_XRayConfig *envoy_config_trace_v2alpha_XRayConfig_new(upb_arena *arena) {
  return (envoy_config_trace_v2alpha_XRayConfig *)_upb_msg_new(&envoy_config_trace_v2alpha_XRayConfig_msginit, arena);
}
UPB_INLINE envoy_config_trace_v2alpha_XRayConfig *envoy_config_trace_v2alpha_XRayConfig_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_trace_v2alpha_XRayConfig *ret = envoy_config_trace_v2alpha_XRayConfig_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_trace_v2alpha_XRayConfig_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_trace_v2alpha_XRayConfig *envoy_config_trace_v2alpha_XRayConfig_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_trace_v2alpha_XRayConfig *ret = envoy_config_trace_v2alpha_XRayConfig_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_trace_v2alpha_XRayConfig_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_trace_v2alpha_XRayConfig_serialize(const envoy_config_trace_v2alpha_XRayConfig *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_trace_v2alpha_XRayConfig_msginit, arena, len);
}

UPB_INLINE bool envoy_config_trace_v2alpha_XRayConfig_has_daemon_endpoint(const envoy_config_trace_v2alpha_XRayConfig *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_SocketAddress* envoy_config_trace_v2alpha_XRayConfig_daemon_endpoint(const envoy_config_trace_v2alpha_XRayConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_SocketAddress*); }
UPB_INLINE upb_strview envoy_config_trace_v2alpha_XRayConfig_segment_name(const envoy_config_trace_v2alpha_XRayConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_config_trace_v2alpha_XRayConfig_has_sampling_rule_manifest(const envoy_config_trace_v2alpha_XRayConfig *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct envoy_api_v2_core_DataSource* envoy_config_trace_v2alpha_XRayConfig_sampling_rule_manifest(const envoy_config_trace_v2alpha_XRayConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct envoy_api_v2_core_DataSource*); }

UPB_INLINE void envoy_config_trace_v2alpha_XRayConfig_set_daemon_endpoint(envoy_config_trace_v2alpha_XRayConfig *msg, struct envoy_api_v2_core_SocketAddress* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_SocketAddress*) = value;
}
UPB_INLINE struct envoy_api_v2_core_SocketAddress* envoy_config_trace_v2alpha_XRayConfig_mutable_daemon_endpoint(envoy_config_trace_v2alpha_XRayConfig *msg, upb_arena *arena) {
  struct envoy_api_v2_core_SocketAddress* sub = (struct envoy_api_v2_core_SocketAddress*)envoy_config_trace_v2alpha_XRayConfig_daemon_endpoint(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_SocketAddress*)_upb_msg_new(&envoy_api_v2_core_SocketAddress_msginit, arena);
    if (!sub) return NULL;
    envoy_config_trace_v2alpha_XRayConfig_set_daemon_endpoint(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_trace_v2alpha_XRayConfig_set_segment_name(envoy_config_trace_v2alpha_XRayConfig *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_trace_v2alpha_XRayConfig_set_sampling_rule_manifest(envoy_config_trace_v2alpha_XRayConfig *msg, struct envoy_api_v2_core_DataSource* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct envoy_api_v2_core_DataSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_DataSource* envoy_config_trace_v2alpha_XRayConfig_mutable_sampling_rule_manifest(envoy_config_trace_v2alpha_XRayConfig *msg, upb_arena *arena) {
  struct envoy_api_v2_core_DataSource* sub = (struct envoy_api_v2_core_DataSource*)envoy_config_trace_v2alpha_XRayConfig_sampling_rule_manifest(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_DataSource*)_upb_msg_new(&envoy_api_v2_core_DataSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_trace_v2alpha_XRayConfig_set_sampling_rule_manifest(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_config_trace_v2alpha_xray_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_CONFIG_TRACE_V2ALPHA_XRAY_PROTO_UPB_H_ */
