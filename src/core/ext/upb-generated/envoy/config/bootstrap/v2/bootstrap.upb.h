/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/config/bootstrap/v2/bootstrap.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_CONFIG_BOOTSTRAP_V2_BOOTSTRAP_PROTO_UPB_H_
#define ENVOY_CONFIG_BOOTSTRAP_V2_BOOTSTRAP_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_config_bootstrap_v2_Bootstrap;
struct envoy_config_bootstrap_v2_Bootstrap_StaticResources;
struct envoy_config_bootstrap_v2_Bootstrap_DynamicResources;
struct envoy_config_bootstrap_v2_Admin;
struct envoy_config_bootstrap_v2_ClusterManager;
struct envoy_config_bootstrap_v2_ClusterManager_OutlierDetection;
struct envoy_config_bootstrap_v2_Watchdog;
struct envoy_config_bootstrap_v2_Runtime;
struct envoy_config_bootstrap_v2_RuntimeLayer;
struct envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer;
struct envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer;
struct envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer;
struct envoy_config_bootstrap_v2_LayeredRuntime;
typedef struct envoy_config_bootstrap_v2_Bootstrap envoy_config_bootstrap_v2_Bootstrap;
typedef struct envoy_config_bootstrap_v2_Bootstrap_StaticResources envoy_config_bootstrap_v2_Bootstrap_StaticResources;
typedef struct envoy_config_bootstrap_v2_Bootstrap_DynamicResources envoy_config_bootstrap_v2_Bootstrap_DynamicResources;
typedef struct envoy_config_bootstrap_v2_Admin envoy_config_bootstrap_v2_Admin;
typedef struct envoy_config_bootstrap_v2_ClusterManager envoy_config_bootstrap_v2_ClusterManager;
typedef struct envoy_config_bootstrap_v2_ClusterManager_OutlierDetection envoy_config_bootstrap_v2_ClusterManager_OutlierDetection;
typedef struct envoy_config_bootstrap_v2_Watchdog envoy_config_bootstrap_v2_Watchdog;
typedef struct envoy_config_bootstrap_v2_Runtime envoy_config_bootstrap_v2_Runtime;
typedef struct envoy_config_bootstrap_v2_RuntimeLayer envoy_config_bootstrap_v2_RuntimeLayer;
typedef struct envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer;
typedef struct envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer;
typedef struct envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer;
typedef struct envoy_config_bootstrap_v2_LayeredRuntime envoy_config_bootstrap_v2_LayeredRuntime;
extern const upb_msglayout envoy_config_bootstrap_v2_Bootstrap_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_Bootstrap_StaticResources_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_Bootstrap_DynamicResources_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_Admin_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_ClusterManager_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_Watchdog_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_Runtime_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_RuntimeLayer_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_msginit;
extern const upb_msglayout envoy_config_bootstrap_v2_LayeredRuntime_msginit;
struct envoy_api_v2_Cluster;
struct envoy_api_v2_Listener;
struct envoy_api_v2_auth_Secret;
struct envoy_api_v2_core_Address;
struct envoy_api_v2_core_ApiConfigSource;
struct envoy_api_v2_core_BindConfig;
struct envoy_api_v2_core_ConfigSource;
struct envoy_api_v2_core_EventServiceConfig;
struct envoy_api_v2_core_Node;
struct envoy_api_v2_core_SocketOption;
struct envoy_config_metrics_v2_StatsConfig;
struct envoy_config_metrics_v2_StatsSink;
struct envoy_config_overload_v2alpha_OverloadManager;
struct envoy_config_trace_v2_Tracing;
struct google_protobuf_Duration;
struct google_protobuf_Struct;
struct google_protobuf_UInt64Value;
extern const upb_msglayout envoy_api_v2_Cluster_msginit;
extern const upb_msglayout envoy_api_v2_Listener_msginit;
extern const upb_msglayout envoy_api_v2_auth_Secret_msginit;
extern const upb_msglayout envoy_api_v2_core_Address_msginit;
extern const upb_msglayout envoy_api_v2_core_ApiConfigSource_msginit;
extern const upb_msglayout envoy_api_v2_core_BindConfig_msginit;
extern const upb_msglayout envoy_api_v2_core_ConfigSource_msginit;
extern const upb_msglayout envoy_api_v2_core_EventServiceConfig_msginit;
extern const upb_msglayout envoy_api_v2_core_Node_msginit;
extern const upb_msglayout envoy_api_v2_core_SocketOption_msginit;
extern const upb_msglayout envoy_config_metrics_v2_StatsConfig_msginit;
extern const upb_msglayout envoy_config_metrics_v2_StatsSink_msginit;
extern const upb_msglayout envoy_config_overload_v2alpha_OverloadManager_msginit;
extern const upb_msglayout envoy_config_trace_v2_Tracing_msginit;
extern const upb_msglayout google_protobuf_Duration_msginit;
extern const upb_msglayout google_protobuf_Struct_msginit;
extern const upb_msglayout google_protobuf_UInt64Value_msginit;


/* envoy.config.bootstrap.v2.Bootstrap */

UPB_INLINE envoy_config_bootstrap_v2_Bootstrap *envoy_config_bootstrap_v2_Bootstrap_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_Bootstrap *)_upb_msg_new(&envoy_config_bootstrap_v2_Bootstrap_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_Bootstrap *envoy_config_bootstrap_v2_Bootstrap_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_Bootstrap *ret = envoy_config_bootstrap_v2_Bootstrap_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Bootstrap_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_Bootstrap *envoy_config_bootstrap_v2_Bootstrap_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_Bootstrap *ret = envoy_config_bootstrap_v2_Bootstrap_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Bootstrap_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_Bootstrap_serialize(const envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_Bootstrap_msginit, arena, len);
}

UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_node(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_Node* envoy_config_bootstrap_v2_Bootstrap_node(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), const struct envoy_api_v2_core_Node*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_static_resources(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const envoy_config_bootstrap_v2_Bootstrap_StaticResources* envoy_config_bootstrap_v2_Bootstrap_static_resources(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(24, 48), const envoy_config_bootstrap_v2_Bootstrap_StaticResources*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_dynamic_resources(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const envoy_config_bootstrap_v2_Bootstrap_DynamicResources* envoy_config_bootstrap_v2_Bootstrap_dynamic_resources(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(28, 56), const envoy_config_bootstrap_v2_Bootstrap_DynamicResources*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_cluster_manager(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 4); }
UPB_INLINE const envoy_config_bootstrap_v2_ClusterManager* envoy_config_bootstrap_v2_Bootstrap_cluster_manager(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(32, 64), const envoy_config_bootstrap_v2_ClusterManager*); }
UPB_INLINE upb_strview envoy_config_bootstrap_v2_Bootstrap_flags_path(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_stats_sinks(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(76, 152)); }
UPB_INLINE const struct envoy_config_metrics_v2_StatsSink* const* envoy_config_bootstrap_v2_Bootstrap_stats_sinks(const envoy_config_bootstrap_v2_Bootstrap *msg, size_t *len) { return (const struct envoy_config_metrics_v2_StatsSink* const*)_upb_array_accessor(msg, UPB_SIZE(76, 152), len); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_stats_flush_interval(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 5); }
UPB_INLINE const struct google_protobuf_Duration* envoy_config_bootstrap_v2_Bootstrap_stats_flush_interval(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(36, 72), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_watchdog(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 6); }
UPB_INLINE const envoy_config_bootstrap_v2_Watchdog* envoy_config_bootstrap_v2_Bootstrap_watchdog(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(40, 80), const envoy_config_bootstrap_v2_Watchdog*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_tracing(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 7); }
UPB_INLINE const struct envoy_config_trace_v2_Tracing* envoy_config_bootstrap_v2_Bootstrap_tracing(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(44, 88), const struct envoy_config_trace_v2_Tracing*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_runtime(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 8); }
UPB_INLINE const envoy_config_bootstrap_v2_Runtime* envoy_config_bootstrap_v2_Bootstrap_runtime(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(48, 96), const envoy_config_bootstrap_v2_Runtime*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_admin(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 9); }
UPB_INLINE const envoy_config_bootstrap_v2_Admin* envoy_config_bootstrap_v2_Bootstrap_admin(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(52, 104), const envoy_config_bootstrap_v2_Admin*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_stats_config(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 10); }
UPB_INLINE const struct envoy_config_metrics_v2_StatsConfig* envoy_config_bootstrap_v2_Bootstrap_stats_config(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(56, 112), const struct envoy_config_metrics_v2_StatsConfig*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_hds_config(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 11); }
UPB_INLINE const struct envoy_api_v2_core_ApiConfigSource* envoy_config_bootstrap_v2_Bootstrap_hds_config(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(60, 120), const struct envoy_api_v2_core_ApiConfigSource*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_overload_manager(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 12); }
UPB_INLINE const struct envoy_config_overload_v2alpha_OverloadManager* envoy_config_bootstrap_v2_Bootstrap_overload_manager(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(64, 128), const struct envoy_config_overload_v2alpha_OverloadManager*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_enable_dispatcher_stats(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(2, 2), bool); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_layered_runtime(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 13); }
UPB_INLINE const envoy_config_bootstrap_v2_LayeredRuntime* envoy_config_bootstrap_v2_Bootstrap_layered_runtime(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(68, 136), const envoy_config_bootstrap_v2_LayeredRuntime*); }
UPB_INLINE upb_strview envoy_config_bootstrap_v2_Bootstrap_header_prefix(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_has_stats_server_version_override(const envoy_config_bootstrap_v2_Bootstrap *msg) { return _upb_hasbit(msg, 14); }
UPB_INLINE const struct google_protobuf_UInt64Value* envoy_config_bootstrap_v2_Bootstrap_stats_server_version_override(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(72, 144), const struct google_protobuf_UInt64Value*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_use_tcp_for_dns_lookups(const envoy_config_bootstrap_v2_Bootstrap *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(3, 3), bool); }

UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_node(envoy_config_bootstrap_v2_Bootstrap *msg, struct envoy_api_v2_core_Node* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), struct envoy_api_v2_core_Node*) = value;
}
UPB_INLINE struct envoy_api_v2_core_Node* envoy_config_bootstrap_v2_Bootstrap_mutable_node(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_api_v2_core_Node* sub = (struct envoy_api_v2_core_Node*)envoy_config_bootstrap_v2_Bootstrap_node(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_Node*)_upb_msg_new(&envoy_api_v2_core_Node_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_node(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_static_resources(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_Bootstrap_StaticResources* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(24, 48), envoy_config_bootstrap_v2_Bootstrap_StaticResources*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_Bootstrap_StaticResources* envoy_config_bootstrap_v2_Bootstrap_mutable_static_resources(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_Bootstrap_StaticResources* sub = (struct envoy_config_bootstrap_v2_Bootstrap_StaticResources*)envoy_config_bootstrap_v2_Bootstrap_static_resources(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_Bootstrap_StaticResources*)_upb_msg_new(&envoy_config_bootstrap_v2_Bootstrap_StaticResources_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_static_resources(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_dynamic_resources(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_Bootstrap_DynamicResources* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(28, 56), envoy_config_bootstrap_v2_Bootstrap_DynamicResources*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_Bootstrap_DynamicResources* envoy_config_bootstrap_v2_Bootstrap_mutable_dynamic_resources(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_Bootstrap_DynamicResources* sub = (struct envoy_config_bootstrap_v2_Bootstrap_DynamicResources*)envoy_config_bootstrap_v2_Bootstrap_dynamic_resources(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_Bootstrap_DynamicResources*)_upb_msg_new(&envoy_config_bootstrap_v2_Bootstrap_DynamicResources_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_dynamic_resources(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_cluster_manager(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_ClusterManager* value) {
  _upb_sethas(msg, 4);
  *UPB_PTR_AT(msg, UPB_SIZE(32, 64), envoy_config_bootstrap_v2_ClusterManager*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_ClusterManager* envoy_config_bootstrap_v2_Bootstrap_mutable_cluster_manager(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_ClusterManager* sub = (struct envoy_config_bootstrap_v2_ClusterManager*)envoy_config_bootstrap_v2_Bootstrap_cluster_manager(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_ClusterManager*)_upb_msg_new(&envoy_config_bootstrap_v2_ClusterManager_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_cluster_manager(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_flags_path(envoy_config_bootstrap_v2_Bootstrap *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE struct envoy_config_metrics_v2_StatsSink** envoy_config_bootstrap_v2_Bootstrap_mutable_stats_sinks(envoy_config_bootstrap_v2_Bootstrap *msg, size_t *len) {
  return (struct envoy_config_metrics_v2_StatsSink**)_upb_array_mutable_accessor(msg, UPB_SIZE(76, 152), len);
}
UPB_INLINE struct envoy_config_metrics_v2_StatsSink** envoy_config_bootstrap_v2_Bootstrap_resize_stats_sinks(envoy_config_bootstrap_v2_Bootstrap *msg, size_t len, upb_arena *arena) {
  return (struct envoy_config_metrics_v2_StatsSink**)_upb_array_resize_accessor2(msg, UPB_SIZE(76, 152), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_config_metrics_v2_StatsSink* envoy_config_bootstrap_v2_Bootstrap_add_stats_sinks(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_metrics_v2_StatsSink* sub = (struct envoy_config_metrics_v2_StatsSink*)_upb_msg_new(&envoy_config_metrics_v2_StatsSink_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(76, 152), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_stats_flush_interval(envoy_config_bootstrap_v2_Bootstrap *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 5);
  *UPB_PTR_AT(msg, UPB_SIZE(36, 72), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_config_bootstrap_v2_Bootstrap_mutable_stats_flush_interval(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_config_bootstrap_v2_Bootstrap_stats_flush_interval(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_stats_flush_interval(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_watchdog(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_Watchdog* value) {
  _upb_sethas(msg, 6);
  *UPB_PTR_AT(msg, UPB_SIZE(40, 80), envoy_config_bootstrap_v2_Watchdog*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_Watchdog* envoy_config_bootstrap_v2_Bootstrap_mutable_watchdog(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_Watchdog* sub = (struct envoy_config_bootstrap_v2_Watchdog*)envoy_config_bootstrap_v2_Bootstrap_watchdog(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_Watchdog*)_upb_msg_new(&envoy_config_bootstrap_v2_Watchdog_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_watchdog(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_tracing(envoy_config_bootstrap_v2_Bootstrap *msg, struct envoy_config_trace_v2_Tracing* value) {
  _upb_sethas(msg, 7);
  *UPB_PTR_AT(msg, UPB_SIZE(44, 88), struct envoy_config_trace_v2_Tracing*) = value;
}
UPB_INLINE struct envoy_config_trace_v2_Tracing* envoy_config_bootstrap_v2_Bootstrap_mutable_tracing(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_trace_v2_Tracing* sub = (struct envoy_config_trace_v2_Tracing*)envoy_config_bootstrap_v2_Bootstrap_tracing(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_trace_v2_Tracing*)_upb_msg_new(&envoy_config_trace_v2_Tracing_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_tracing(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_runtime(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_Runtime* value) {
  _upb_sethas(msg, 8);
  *UPB_PTR_AT(msg, UPB_SIZE(48, 96), envoy_config_bootstrap_v2_Runtime*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_Runtime* envoy_config_bootstrap_v2_Bootstrap_mutable_runtime(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_Runtime* sub = (struct envoy_config_bootstrap_v2_Runtime*)envoy_config_bootstrap_v2_Bootstrap_runtime(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_Runtime*)_upb_msg_new(&envoy_config_bootstrap_v2_Runtime_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_runtime(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_admin(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_Admin* value) {
  _upb_sethas(msg, 9);
  *UPB_PTR_AT(msg, UPB_SIZE(52, 104), envoy_config_bootstrap_v2_Admin*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_Admin* envoy_config_bootstrap_v2_Bootstrap_mutable_admin(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_Admin* sub = (struct envoy_config_bootstrap_v2_Admin*)envoy_config_bootstrap_v2_Bootstrap_admin(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_Admin*)_upb_msg_new(&envoy_config_bootstrap_v2_Admin_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_admin(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_stats_config(envoy_config_bootstrap_v2_Bootstrap *msg, struct envoy_config_metrics_v2_StatsConfig* value) {
  _upb_sethas(msg, 10);
  *UPB_PTR_AT(msg, UPB_SIZE(56, 112), struct envoy_config_metrics_v2_StatsConfig*) = value;
}
UPB_INLINE struct envoy_config_metrics_v2_StatsConfig* envoy_config_bootstrap_v2_Bootstrap_mutable_stats_config(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_metrics_v2_StatsConfig* sub = (struct envoy_config_metrics_v2_StatsConfig*)envoy_config_bootstrap_v2_Bootstrap_stats_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_metrics_v2_StatsConfig*)_upb_msg_new(&envoy_config_metrics_v2_StatsConfig_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_stats_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_hds_config(envoy_config_bootstrap_v2_Bootstrap *msg, struct envoy_api_v2_core_ApiConfigSource* value) {
  _upb_sethas(msg, 11);
  *UPB_PTR_AT(msg, UPB_SIZE(60, 120), struct envoy_api_v2_core_ApiConfigSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_ApiConfigSource* envoy_config_bootstrap_v2_Bootstrap_mutable_hds_config(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_api_v2_core_ApiConfigSource* sub = (struct envoy_api_v2_core_ApiConfigSource*)envoy_config_bootstrap_v2_Bootstrap_hds_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_ApiConfigSource*)_upb_msg_new(&envoy_api_v2_core_ApiConfigSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_hds_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_overload_manager(envoy_config_bootstrap_v2_Bootstrap *msg, struct envoy_config_overload_v2alpha_OverloadManager* value) {
  _upb_sethas(msg, 12);
  *UPB_PTR_AT(msg, UPB_SIZE(64, 128), struct envoy_config_overload_v2alpha_OverloadManager*) = value;
}
UPB_INLINE struct envoy_config_overload_v2alpha_OverloadManager* envoy_config_bootstrap_v2_Bootstrap_mutable_overload_manager(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_overload_v2alpha_OverloadManager* sub = (struct envoy_config_overload_v2alpha_OverloadManager*)envoy_config_bootstrap_v2_Bootstrap_overload_manager(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_overload_v2alpha_OverloadManager*)_upb_msg_new(&envoy_config_overload_v2alpha_OverloadManager_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_overload_manager(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_enable_dispatcher_stats(envoy_config_bootstrap_v2_Bootstrap *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(2, 2), bool) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_layered_runtime(envoy_config_bootstrap_v2_Bootstrap *msg, envoy_config_bootstrap_v2_LayeredRuntime* value) {
  _upb_sethas(msg, 13);
  *UPB_PTR_AT(msg, UPB_SIZE(68, 136), envoy_config_bootstrap_v2_LayeredRuntime*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_LayeredRuntime* envoy_config_bootstrap_v2_Bootstrap_mutable_layered_runtime(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_LayeredRuntime* sub = (struct envoy_config_bootstrap_v2_LayeredRuntime*)envoy_config_bootstrap_v2_Bootstrap_layered_runtime(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_LayeredRuntime*)_upb_msg_new(&envoy_config_bootstrap_v2_LayeredRuntime_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_layered_runtime(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_header_prefix(envoy_config_bootstrap_v2_Bootstrap *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_stats_server_version_override(envoy_config_bootstrap_v2_Bootstrap *msg, struct google_protobuf_UInt64Value* value) {
  _upb_sethas(msg, 14);
  *UPB_PTR_AT(msg, UPB_SIZE(72, 144), struct google_protobuf_UInt64Value*) = value;
}
UPB_INLINE struct google_protobuf_UInt64Value* envoy_config_bootstrap_v2_Bootstrap_mutable_stats_server_version_override(envoy_config_bootstrap_v2_Bootstrap *msg, upb_arena *arena) {
  struct google_protobuf_UInt64Value* sub = (struct google_protobuf_UInt64Value*)envoy_config_bootstrap_v2_Bootstrap_stats_server_version_override(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_UInt64Value*)_upb_msg_new(&google_protobuf_UInt64Value_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_set_stats_server_version_override(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_set_use_tcp_for_dns_lookups(envoy_config_bootstrap_v2_Bootstrap *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(3, 3), bool) = value;
}

/* envoy.config.bootstrap.v2.Bootstrap.StaticResources */

UPB_INLINE envoy_config_bootstrap_v2_Bootstrap_StaticResources *envoy_config_bootstrap_v2_Bootstrap_StaticResources_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_Bootstrap_StaticResources *)_upb_msg_new(&envoy_config_bootstrap_v2_Bootstrap_StaticResources_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_Bootstrap_StaticResources *envoy_config_bootstrap_v2_Bootstrap_StaticResources_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_Bootstrap_StaticResources *ret = envoy_config_bootstrap_v2_Bootstrap_StaticResources_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Bootstrap_StaticResources_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_Bootstrap_StaticResources *envoy_config_bootstrap_v2_Bootstrap_StaticResources_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_Bootstrap_StaticResources *ret = envoy_config_bootstrap_v2_Bootstrap_StaticResources_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Bootstrap_StaticResources_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_Bootstrap_StaticResources_serialize(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_Bootstrap_StaticResources_msginit, arena, len);
}

UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_StaticResources_has_listeners(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const struct envoy_api_v2_Listener* const* envoy_config_bootstrap_v2_Bootstrap_StaticResources_listeners(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t *len) { return (const struct envoy_api_v2_Listener* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_StaticResources_has_clusters(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(4, 8)); }
UPB_INLINE const struct envoy_api_v2_Cluster* const* envoy_config_bootstrap_v2_Bootstrap_StaticResources_clusters(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t *len) { return (const struct envoy_api_v2_Cluster* const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_StaticResources_has_secrets(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const struct envoy_api_v2_auth_Secret* const* envoy_config_bootstrap_v2_Bootstrap_StaticResources_secrets(const envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t *len) { return (const struct envoy_api_v2_auth_Secret* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }

UPB_INLINE struct envoy_api_v2_Listener** envoy_config_bootstrap_v2_Bootstrap_StaticResources_mutable_listeners(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t *len) {
  return (struct envoy_api_v2_Listener**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE struct envoy_api_v2_Listener** envoy_config_bootstrap_v2_Bootstrap_StaticResources_resize_listeners(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_Listener**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_Listener* envoy_config_bootstrap_v2_Bootstrap_StaticResources_add_listeners(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, upb_arena *arena) {
  struct envoy_api_v2_Listener* sub = (struct envoy_api_v2_Listener*)_upb_msg_new(&envoy_api_v2_Listener_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE struct envoy_api_v2_Cluster** envoy_config_bootstrap_v2_Bootstrap_StaticResources_mutable_clusters(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t *len) {
  return (struct envoy_api_v2_Cluster**)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE struct envoy_api_v2_Cluster** envoy_config_bootstrap_v2_Bootstrap_StaticResources_resize_clusters(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_Cluster**)_upb_array_resize_accessor2(msg, UPB_SIZE(4, 8), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_Cluster* envoy_config_bootstrap_v2_Bootstrap_StaticResources_add_clusters(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, upb_arena *arena) {
  struct envoy_api_v2_Cluster* sub = (struct envoy_api_v2_Cluster*)_upb_msg_new(&envoy_api_v2_Cluster_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(4, 8), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE struct envoy_api_v2_auth_Secret** envoy_config_bootstrap_v2_Bootstrap_StaticResources_mutable_secrets(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t *len) {
  return (struct envoy_api_v2_auth_Secret**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE struct envoy_api_v2_auth_Secret** envoy_config_bootstrap_v2_Bootstrap_StaticResources_resize_secrets(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_auth_Secret**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_auth_Secret* envoy_config_bootstrap_v2_Bootstrap_StaticResources_add_secrets(envoy_config_bootstrap_v2_Bootstrap_StaticResources *msg, upb_arena *arena) {
  struct envoy_api_v2_auth_Secret* sub = (struct envoy_api_v2_auth_Secret*)_upb_msg_new(&envoy_api_v2_auth_Secret_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.config.bootstrap.v2.Bootstrap.DynamicResources */

UPB_INLINE envoy_config_bootstrap_v2_Bootstrap_DynamicResources *envoy_config_bootstrap_v2_Bootstrap_DynamicResources_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_Bootstrap_DynamicResources *)_upb_msg_new(&envoy_config_bootstrap_v2_Bootstrap_DynamicResources_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_Bootstrap_DynamicResources *envoy_config_bootstrap_v2_Bootstrap_DynamicResources_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_Bootstrap_DynamicResources *ret = envoy_config_bootstrap_v2_Bootstrap_DynamicResources_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Bootstrap_DynamicResources_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_Bootstrap_DynamicResources *envoy_config_bootstrap_v2_Bootstrap_DynamicResources_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_Bootstrap_DynamicResources *ret = envoy_config_bootstrap_v2_Bootstrap_DynamicResources_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Bootstrap_DynamicResources_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_Bootstrap_DynamicResources_serialize(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_Bootstrap_DynamicResources_msginit, arena, len);
}

UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_DynamicResources_has_lds_config(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_ConfigSource* envoy_config_bootstrap_v2_Bootstrap_DynamicResources_lds_config(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_api_v2_core_ConfigSource*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_DynamicResources_has_cds_config(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct envoy_api_v2_core_ConfigSource* envoy_config_bootstrap_v2_Bootstrap_DynamicResources_cds_config(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct envoy_api_v2_core_ConfigSource*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Bootstrap_DynamicResources_has_ads_config(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const struct envoy_api_v2_core_ApiConfigSource* envoy_config_bootstrap_v2_Bootstrap_DynamicResources_ads_config(const envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_ApiConfigSource*); }

UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_DynamicResources_set_lds_config(envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, struct envoy_api_v2_core_ConfigSource* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_api_v2_core_ConfigSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_ConfigSource* envoy_config_bootstrap_v2_Bootstrap_DynamicResources_mutable_lds_config(envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, upb_arena *arena) {
  struct envoy_api_v2_core_ConfigSource* sub = (struct envoy_api_v2_core_ConfigSource*)envoy_config_bootstrap_v2_Bootstrap_DynamicResources_lds_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_ConfigSource*)_upb_msg_new(&envoy_api_v2_core_ConfigSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_DynamicResources_set_lds_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_DynamicResources_set_cds_config(envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, struct envoy_api_v2_core_ConfigSource* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct envoy_api_v2_core_ConfigSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_ConfigSource* envoy_config_bootstrap_v2_Bootstrap_DynamicResources_mutable_cds_config(envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, upb_arena *arena) {
  struct envoy_api_v2_core_ConfigSource* sub = (struct envoy_api_v2_core_ConfigSource*)envoy_config_bootstrap_v2_Bootstrap_DynamicResources_cds_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_ConfigSource*)_upb_msg_new(&envoy_api_v2_core_ConfigSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_DynamicResources_set_cds_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Bootstrap_DynamicResources_set_ads_config(envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, struct envoy_api_v2_core_ApiConfigSource* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_ApiConfigSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_ApiConfigSource* envoy_config_bootstrap_v2_Bootstrap_DynamicResources_mutable_ads_config(envoy_config_bootstrap_v2_Bootstrap_DynamicResources *msg, upb_arena *arena) {
  struct envoy_api_v2_core_ApiConfigSource* sub = (struct envoy_api_v2_core_ApiConfigSource*)envoy_config_bootstrap_v2_Bootstrap_DynamicResources_ads_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_ApiConfigSource*)_upb_msg_new(&envoy_api_v2_core_ApiConfigSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Bootstrap_DynamicResources_set_ads_config(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.Admin */

UPB_INLINE envoy_config_bootstrap_v2_Admin *envoy_config_bootstrap_v2_Admin_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_Admin *)_upb_msg_new(&envoy_config_bootstrap_v2_Admin_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_Admin *envoy_config_bootstrap_v2_Admin_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_Admin *ret = envoy_config_bootstrap_v2_Admin_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Admin_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_Admin *envoy_config_bootstrap_v2_Admin_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_Admin *ret = envoy_config_bootstrap_v2_Admin_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Admin_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_Admin_serialize(const envoy_config_bootstrap_v2_Admin *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_Admin_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_bootstrap_v2_Admin_access_log_path(const envoy_config_bootstrap_v2_Admin *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE upb_strview envoy_config_bootstrap_v2_Admin_profile_path(const envoy_config_bootstrap_v2_Admin *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_Admin_has_address(const envoy_config_bootstrap_v2_Admin *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_Address* envoy_config_bootstrap_v2_Admin_address(const envoy_config_bootstrap_v2_Admin *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), const struct envoy_api_v2_core_Address*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Admin_has_socket_options(const envoy_config_bootstrap_v2_Admin *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(24, 48)); }
UPB_INLINE const struct envoy_api_v2_core_SocketOption* const* envoy_config_bootstrap_v2_Admin_socket_options(const envoy_config_bootstrap_v2_Admin *msg, size_t *len) { return (const struct envoy_api_v2_core_SocketOption* const*)_upb_array_accessor(msg, UPB_SIZE(24, 48), len); }

UPB_INLINE void envoy_config_bootstrap_v2_Admin_set_access_log_path(envoy_config_bootstrap_v2_Admin *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Admin_set_profile_path(envoy_config_bootstrap_v2_Admin *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Admin_set_address(envoy_config_bootstrap_v2_Admin *msg, struct envoy_api_v2_core_Address* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), struct envoy_api_v2_core_Address*) = value;
}
UPB_INLINE struct envoy_api_v2_core_Address* envoy_config_bootstrap_v2_Admin_mutable_address(envoy_config_bootstrap_v2_Admin *msg, upb_arena *arena) {
  struct envoy_api_v2_core_Address* sub = (struct envoy_api_v2_core_Address*)envoy_config_bootstrap_v2_Admin_address(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_Address*)_upb_msg_new(&envoy_api_v2_core_Address_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Admin_set_address(msg, sub);
  }
  return sub;
}
UPB_INLINE struct envoy_api_v2_core_SocketOption** envoy_config_bootstrap_v2_Admin_mutable_socket_options(envoy_config_bootstrap_v2_Admin *msg, size_t *len) {
  return (struct envoy_api_v2_core_SocketOption**)_upb_array_mutable_accessor(msg, UPB_SIZE(24, 48), len);
}
UPB_INLINE struct envoy_api_v2_core_SocketOption** envoy_config_bootstrap_v2_Admin_resize_socket_options(envoy_config_bootstrap_v2_Admin *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_core_SocketOption**)_upb_array_resize_accessor2(msg, UPB_SIZE(24, 48), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_core_SocketOption* envoy_config_bootstrap_v2_Admin_add_socket_options(envoy_config_bootstrap_v2_Admin *msg, upb_arena *arena) {
  struct envoy_api_v2_core_SocketOption* sub = (struct envoy_api_v2_core_SocketOption*)_upb_msg_new(&envoy_api_v2_core_SocketOption_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(24, 48), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.config.bootstrap.v2.ClusterManager */

UPB_INLINE envoy_config_bootstrap_v2_ClusterManager *envoy_config_bootstrap_v2_ClusterManager_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_ClusterManager *)_upb_msg_new(&envoy_config_bootstrap_v2_ClusterManager_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_ClusterManager *envoy_config_bootstrap_v2_ClusterManager_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_ClusterManager *ret = envoy_config_bootstrap_v2_ClusterManager_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_ClusterManager_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_ClusterManager *envoy_config_bootstrap_v2_ClusterManager_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_ClusterManager *ret = envoy_config_bootstrap_v2_ClusterManager_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_ClusterManager_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_ClusterManager_serialize(const envoy_config_bootstrap_v2_ClusterManager *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_ClusterManager_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_bootstrap_v2_ClusterManager_local_cluster_name(const envoy_config_bootstrap_v2_ClusterManager *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_ClusterManager_has_outlier_detection(const envoy_config_bootstrap_v2_ClusterManager *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const envoy_config_bootstrap_v2_ClusterManager_OutlierDetection* envoy_config_bootstrap_v2_ClusterManager_outlier_detection(const envoy_config_bootstrap_v2_ClusterManager *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const envoy_config_bootstrap_v2_ClusterManager_OutlierDetection*); }
UPB_INLINE bool envoy_config_bootstrap_v2_ClusterManager_has_upstream_bind_config(const envoy_config_bootstrap_v2_ClusterManager *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct envoy_api_v2_core_BindConfig* envoy_config_bootstrap_v2_ClusterManager_upstream_bind_config(const envoy_config_bootstrap_v2_ClusterManager *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct envoy_api_v2_core_BindConfig*); }
UPB_INLINE bool envoy_config_bootstrap_v2_ClusterManager_has_load_stats_config(const envoy_config_bootstrap_v2_ClusterManager *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const struct envoy_api_v2_core_ApiConfigSource* envoy_config_bootstrap_v2_ClusterManager_load_stats_config(const envoy_config_bootstrap_v2_ClusterManager *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), const struct envoy_api_v2_core_ApiConfigSource*); }

UPB_INLINE void envoy_config_bootstrap_v2_ClusterManager_set_local_cluster_name(envoy_config_bootstrap_v2_ClusterManager *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_ClusterManager_set_outlier_detection(envoy_config_bootstrap_v2_ClusterManager *msg, envoy_config_bootstrap_v2_ClusterManager_OutlierDetection* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), envoy_config_bootstrap_v2_ClusterManager_OutlierDetection*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_ClusterManager_OutlierDetection* envoy_config_bootstrap_v2_ClusterManager_mutable_outlier_detection(envoy_config_bootstrap_v2_ClusterManager *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_ClusterManager_OutlierDetection* sub = (struct envoy_config_bootstrap_v2_ClusterManager_OutlierDetection*)envoy_config_bootstrap_v2_ClusterManager_outlier_detection(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_ClusterManager_OutlierDetection*)_upb_msg_new(&envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_ClusterManager_set_outlier_detection(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_ClusterManager_set_upstream_bind_config(envoy_config_bootstrap_v2_ClusterManager *msg, struct envoy_api_v2_core_BindConfig* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct envoy_api_v2_core_BindConfig*) = value;
}
UPB_INLINE struct envoy_api_v2_core_BindConfig* envoy_config_bootstrap_v2_ClusterManager_mutable_upstream_bind_config(envoy_config_bootstrap_v2_ClusterManager *msg, upb_arena *arena) {
  struct envoy_api_v2_core_BindConfig* sub = (struct envoy_api_v2_core_BindConfig*)envoy_config_bootstrap_v2_ClusterManager_upstream_bind_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_BindConfig*)_upb_msg_new(&envoy_api_v2_core_BindConfig_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_ClusterManager_set_upstream_bind_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_ClusterManager_set_load_stats_config(envoy_config_bootstrap_v2_ClusterManager *msg, struct envoy_api_v2_core_ApiConfigSource* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), struct envoy_api_v2_core_ApiConfigSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_ApiConfigSource* envoy_config_bootstrap_v2_ClusterManager_mutable_load_stats_config(envoy_config_bootstrap_v2_ClusterManager *msg, upb_arena *arena) {
  struct envoy_api_v2_core_ApiConfigSource* sub = (struct envoy_api_v2_core_ApiConfigSource*)envoy_config_bootstrap_v2_ClusterManager_load_stats_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_ApiConfigSource*)_upb_msg_new(&envoy_api_v2_core_ApiConfigSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_ClusterManager_set_load_stats_config(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.ClusterManager.OutlierDetection */

UPB_INLINE envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *)_upb_msg_new(&envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *ret = envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *ret = envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_serialize(const envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_event_log_path(const envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_has_event_service(const envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_EventServiceConfig* envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_event_service(const envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_EventServiceConfig*); }

UPB_INLINE void envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_set_event_log_path(envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_set_event_service(envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg, struct envoy_api_v2_core_EventServiceConfig* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_EventServiceConfig*) = value;
}
UPB_INLINE struct envoy_api_v2_core_EventServiceConfig* envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_mutable_event_service(envoy_config_bootstrap_v2_ClusterManager_OutlierDetection *msg, upb_arena *arena) {
  struct envoy_api_v2_core_EventServiceConfig* sub = (struct envoy_api_v2_core_EventServiceConfig*)envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_event_service(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_EventServiceConfig*)_upb_msg_new(&envoy_api_v2_core_EventServiceConfig_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_ClusterManager_OutlierDetection_set_event_service(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.Watchdog */

UPB_INLINE envoy_config_bootstrap_v2_Watchdog *envoy_config_bootstrap_v2_Watchdog_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_Watchdog *)_upb_msg_new(&envoy_config_bootstrap_v2_Watchdog_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_Watchdog *envoy_config_bootstrap_v2_Watchdog_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_Watchdog *ret = envoy_config_bootstrap_v2_Watchdog_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Watchdog_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_Watchdog *envoy_config_bootstrap_v2_Watchdog_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_Watchdog *ret = envoy_config_bootstrap_v2_Watchdog_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Watchdog_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_Watchdog_serialize(const envoy_config_bootstrap_v2_Watchdog *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_Watchdog_msginit, arena, len);
}

UPB_INLINE bool envoy_config_bootstrap_v2_Watchdog_has_miss_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_miss_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Watchdog_has_megamiss_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_megamiss_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Watchdog_has_kill_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_kill_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_config_bootstrap_v2_Watchdog_has_multikill_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return _upb_hasbit(msg, 4); }
UPB_INLINE const struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_multikill_timeout(const envoy_config_bootstrap_v2_Watchdog *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct google_protobuf_Duration*); }

UPB_INLINE void envoy_config_bootstrap_v2_Watchdog_set_miss_timeout(envoy_config_bootstrap_v2_Watchdog *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_mutable_miss_timeout(envoy_config_bootstrap_v2_Watchdog *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_config_bootstrap_v2_Watchdog_miss_timeout(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Watchdog_set_miss_timeout(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Watchdog_set_megamiss_timeout(envoy_config_bootstrap_v2_Watchdog *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_mutable_megamiss_timeout(envoy_config_bootstrap_v2_Watchdog *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_config_bootstrap_v2_Watchdog_megamiss_timeout(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Watchdog_set_megamiss_timeout(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Watchdog_set_kill_timeout(envoy_config_bootstrap_v2_Watchdog *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_mutable_kill_timeout(envoy_config_bootstrap_v2_Watchdog *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_config_bootstrap_v2_Watchdog_kill_timeout(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Watchdog_set_kill_timeout(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_Watchdog_set_multikill_timeout(envoy_config_bootstrap_v2_Watchdog *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 4);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_config_bootstrap_v2_Watchdog_mutable_multikill_timeout(envoy_config_bootstrap_v2_Watchdog *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_config_bootstrap_v2_Watchdog_multikill_timeout(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Watchdog_set_multikill_timeout(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.Runtime */

UPB_INLINE envoy_config_bootstrap_v2_Runtime *envoy_config_bootstrap_v2_Runtime_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_Runtime *)_upb_msg_new(&envoy_config_bootstrap_v2_Runtime_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_Runtime *envoy_config_bootstrap_v2_Runtime_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_Runtime *ret = envoy_config_bootstrap_v2_Runtime_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Runtime_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_Runtime *envoy_config_bootstrap_v2_Runtime_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_Runtime *ret = envoy_config_bootstrap_v2_Runtime_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_Runtime_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_Runtime_serialize(const envoy_config_bootstrap_v2_Runtime *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_Runtime_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_bootstrap_v2_Runtime_symlink_root(const envoy_config_bootstrap_v2_Runtime *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE upb_strview envoy_config_bootstrap_v2_Runtime_subdirectory(const envoy_config_bootstrap_v2_Runtime *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview); }
UPB_INLINE upb_strview envoy_config_bootstrap_v2_Runtime_override_subdirectory(const envoy_config_bootstrap_v2_Runtime *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_Runtime_has_base(const envoy_config_bootstrap_v2_Runtime *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Struct* envoy_config_bootstrap_v2_Runtime_base(const envoy_config_bootstrap_v2_Runtime *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(28, 56), const struct google_protobuf_Struct*); }

UPB_INLINE void envoy_config_bootstrap_v2_Runtime_set_symlink_root(envoy_config_bootstrap_v2_Runtime *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Runtime_set_subdirectory(envoy_config_bootstrap_v2_Runtime *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Runtime_set_override_subdirectory(envoy_config_bootstrap_v2_Runtime *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_Runtime_set_base(envoy_config_bootstrap_v2_Runtime *msg, struct google_protobuf_Struct* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(28, 56), struct google_protobuf_Struct*) = value;
}
UPB_INLINE struct google_protobuf_Struct* envoy_config_bootstrap_v2_Runtime_mutable_base(envoy_config_bootstrap_v2_Runtime *msg, upb_arena *arena) {
  struct google_protobuf_Struct* sub = (struct google_protobuf_Struct*)envoy_config_bootstrap_v2_Runtime_base(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Struct*)_upb_msg_new(&google_protobuf_Struct_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_Runtime_set_base(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.RuntimeLayer */

UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer *envoy_config_bootstrap_v2_RuntimeLayer_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_RuntimeLayer *)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer *envoy_config_bootstrap_v2_RuntimeLayer_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer *envoy_config_bootstrap_v2_RuntimeLayer_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_RuntimeLayer_serialize(const envoy_config_bootstrap_v2_RuntimeLayer *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_RuntimeLayer_msginit, arena, len);
}

typedef enum {
  envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_static_layer = 2,
  envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_disk_layer = 3,
  envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_admin_layer = 4,
  envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_rtds_layer = 5,
  envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_NOT_SET = 0
} envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_oneofcases;
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_oneofcases envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_case(const envoy_config_bootstrap_v2_RuntimeLayer* msg) { return (envoy_config_bootstrap_v2_RuntimeLayer_layer_specifier_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(12, 24), int32_t); }

UPB_INLINE upb_strview envoy_config_bootstrap_v2_RuntimeLayer_name(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_RuntimeLayer_has_static_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 2; }
UPB_INLINE const struct google_protobuf_Struct* envoy_config_bootstrap_v2_RuntimeLayer_static_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Struct*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 2, NULL); }
UPB_INLINE bool envoy_config_bootstrap_v2_RuntimeLayer_has_disk_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 3; }
UPB_INLINE const envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer* envoy_config_bootstrap_v2_RuntimeLayer_disk_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return UPB_READ_ONEOF(msg, const envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 3, NULL); }
UPB_INLINE bool envoy_config_bootstrap_v2_RuntimeLayer_has_admin_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 4; }
UPB_INLINE const envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer* envoy_config_bootstrap_v2_RuntimeLayer_admin_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return UPB_READ_ONEOF(msg, const envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 4, NULL); }
UPB_INLINE bool envoy_config_bootstrap_v2_RuntimeLayer_has_rtds_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 5; }
UPB_INLINE const envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer* envoy_config_bootstrap_v2_RuntimeLayer_rtds_layer(const envoy_config_bootstrap_v2_RuntimeLayer *msg) { return UPB_READ_ONEOF(msg, const envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 5, NULL); }

UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_set_name(envoy_config_bootstrap_v2_RuntimeLayer *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_set_static_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, struct google_protobuf_Struct* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Struct*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 2);
}
UPB_INLINE struct google_protobuf_Struct* envoy_config_bootstrap_v2_RuntimeLayer_mutable_static_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, upb_arena *arena) {
  struct google_protobuf_Struct* sub = (struct google_protobuf_Struct*)envoy_config_bootstrap_v2_RuntimeLayer_static_layer(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Struct*)_upb_msg_new(&google_protobuf_Struct_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_RuntimeLayer_set_static_layer(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_set_disk_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 3);
}
UPB_INLINE struct envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer* envoy_config_bootstrap_v2_RuntimeLayer_mutable_disk_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer* sub = (struct envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer*)envoy_config_bootstrap_v2_RuntimeLayer_disk_layer(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer*)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_RuntimeLayer_set_disk_layer(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_set_admin_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 4);
}
UPB_INLINE struct envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer* envoy_config_bootstrap_v2_RuntimeLayer_mutable_admin_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer* sub = (struct envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer*)envoy_config_bootstrap_v2_RuntimeLayer_admin_layer(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer*)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_RuntimeLayer_set_admin_layer(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_set_rtds_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 5);
}
UPB_INLINE struct envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer* envoy_config_bootstrap_v2_RuntimeLayer_mutable_rtds_layer(envoy_config_bootstrap_v2_RuntimeLayer *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer* sub = (struct envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer*)envoy_config_bootstrap_v2_RuntimeLayer_rtds_layer(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer*)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_RuntimeLayer_set_rtds_layer(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.RuntimeLayer.DiskLayer */

UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_serialize(const envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_symlink_root(const envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_append_service_cluster(const envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool); }
UPB_INLINE upb_strview envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_subdirectory(const envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview); }

UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_set_symlink_root(envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_set_append_service_cluster(envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer_set_subdirectory(envoy_config_bootstrap_v2_RuntimeLayer_DiskLayer *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview) = value;
}

/* envoy.config.bootstrap.v2.RuntimeLayer.AdminLayer */

UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_serialize(const envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_RuntimeLayer_AdminLayer_msginit, arena, len);
}



/* envoy.config.bootstrap.v2.RuntimeLayer.RtdsLayer */

UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *ret = envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_serialize(const envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_name(const envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_has_rtds_config(const envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_ConfigSource* envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_rtds_config(const envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_ConfigSource*); }

UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_set_name(envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_set_rtds_config(envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg, struct envoy_api_v2_core_ConfigSource* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_ConfigSource*) = value;
}
UPB_INLINE struct envoy_api_v2_core_ConfigSource* envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_mutable_rtds_config(envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer *msg, upb_arena *arena) {
  struct envoy_api_v2_core_ConfigSource* sub = (struct envoy_api_v2_core_ConfigSource*)envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_rtds_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_ConfigSource*)_upb_msg_new(&envoy_api_v2_core_ConfigSource_msginit, arena);
    if (!sub) return NULL;
    envoy_config_bootstrap_v2_RuntimeLayer_RtdsLayer_set_rtds_config(msg, sub);
  }
  return sub;
}

/* envoy.config.bootstrap.v2.LayeredRuntime */

UPB_INLINE envoy_config_bootstrap_v2_LayeredRuntime *envoy_config_bootstrap_v2_LayeredRuntime_new(upb_arena *arena) {
  return (envoy_config_bootstrap_v2_LayeredRuntime *)_upb_msg_new(&envoy_config_bootstrap_v2_LayeredRuntime_msginit, arena);
}
UPB_INLINE envoy_config_bootstrap_v2_LayeredRuntime *envoy_config_bootstrap_v2_LayeredRuntime_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_bootstrap_v2_LayeredRuntime *ret = envoy_config_bootstrap_v2_LayeredRuntime_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_LayeredRuntime_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_bootstrap_v2_LayeredRuntime *envoy_config_bootstrap_v2_LayeredRuntime_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_bootstrap_v2_LayeredRuntime *ret = envoy_config_bootstrap_v2_LayeredRuntime_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_bootstrap_v2_LayeredRuntime_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_bootstrap_v2_LayeredRuntime_serialize(const envoy_config_bootstrap_v2_LayeredRuntime *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_bootstrap_v2_LayeredRuntime_msginit, arena, len);
}

UPB_INLINE bool envoy_config_bootstrap_v2_LayeredRuntime_has_layers(const envoy_config_bootstrap_v2_LayeredRuntime *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const envoy_config_bootstrap_v2_RuntimeLayer* const* envoy_config_bootstrap_v2_LayeredRuntime_layers(const envoy_config_bootstrap_v2_LayeredRuntime *msg, size_t *len) { return (const envoy_config_bootstrap_v2_RuntimeLayer* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer** envoy_config_bootstrap_v2_LayeredRuntime_mutable_layers(envoy_config_bootstrap_v2_LayeredRuntime *msg, size_t *len) {
  return (envoy_config_bootstrap_v2_RuntimeLayer**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_config_bootstrap_v2_RuntimeLayer** envoy_config_bootstrap_v2_LayeredRuntime_resize_layers(envoy_config_bootstrap_v2_LayeredRuntime *msg, size_t len, upb_arena *arena) {
  return (envoy_config_bootstrap_v2_RuntimeLayer**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_config_bootstrap_v2_RuntimeLayer* envoy_config_bootstrap_v2_LayeredRuntime_add_layers(envoy_config_bootstrap_v2_LayeredRuntime *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_RuntimeLayer* sub = (struct envoy_config_bootstrap_v2_RuntimeLayer*)_upb_msg_new(&envoy_config_bootstrap_v2_RuntimeLayer_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

extern const upb_msglayout_file envoy_config_bootstrap_v2_bootstrap_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_CONFIG_BOOTSTRAP_V2_BOOTSTRAP_PROTO_UPB_H_ */
