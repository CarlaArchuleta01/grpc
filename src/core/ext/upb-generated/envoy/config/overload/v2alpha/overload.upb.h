/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/config/overload/v2alpha/overload.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_CONFIG_OVERLOAD_V2ALPHA_OVERLOAD_PROTO_UPB_H_
#define ENVOY_CONFIG_OVERLOAD_V2ALPHA_OVERLOAD_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_config_overload_v2alpha_ResourceMonitor;
struct envoy_config_overload_v2alpha_ThresholdTrigger;
struct envoy_config_overload_v2alpha_Trigger;
struct envoy_config_overload_v2alpha_OverloadAction;
struct envoy_config_overload_v2alpha_OverloadManager;
typedef struct envoy_config_overload_v2alpha_ResourceMonitor envoy_config_overload_v2alpha_ResourceMonitor;
typedef struct envoy_config_overload_v2alpha_ThresholdTrigger envoy_config_overload_v2alpha_ThresholdTrigger;
typedef struct envoy_config_overload_v2alpha_Trigger envoy_config_overload_v2alpha_Trigger;
typedef struct envoy_config_overload_v2alpha_OverloadAction envoy_config_overload_v2alpha_OverloadAction;
typedef struct envoy_config_overload_v2alpha_OverloadManager envoy_config_overload_v2alpha_OverloadManager;
extern const upb_msglayout envoy_config_overload_v2alpha_ResourceMonitor_msginit;
extern const upb_msglayout envoy_config_overload_v2alpha_ThresholdTrigger_msginit;
extern const upb_msglayout envoy_config_overload_v2alpha_Trigger_msginit;
extern const upb_msglayout envoy_config_overload_v2alpha_OverloadAction_msginit;
extern const upb_msglayout envoy_config_overload_v2alpha_OverloadManager_msginit;
struct google_protobuf_Any;
struct google_protobuf_Duration;
struct google_protobuf_Struct;
extern const upb_msglayout google_protobuf_Any_msginit;
extern const upb_msglayout google_protobuf_Duration_msginit;
extern const upb_msglayout google_protobuf_Struct_msginit;


/* envoy.config.overload.v2alpha.ResourceMonitor */

UPB_INLINE envoy_config_overload_v2alpha_ResourceMonitor *envoy_config_overload_v2alpha_ResourceMonitor_new(upb_arena *arena) {
  return (envoy_config_overload_v2alpha_ResourceMonitor *)_upb_msg_new(&envoy_config_overload_v2alpha_ResourceMonitor_msginit, arena);
}
UPB_INLINE envoy_config_overload_v2alpha_ResourceMonitor *envoy_config_overload_v2alpha_ResourceMonitor_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_overload_v2alpha_ResourceMonitor *ret = envoy_config_overload_v2alpha_ResourceMonitor_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_ResourceMonitor_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_overload_v2alpha_ResourceMonitor *envoy_config_overload_v2alpha_ResourceMonitor_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_overload_v2alpha_ResourceMonitor *ret = envoy_config_overload_v2alpha_ResourceMonitor_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_ResourceMonitor_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_overload_v2alpha_ResourceMonitor_serialize(const envoy_config_overload_v2alpha_ResourceMonitor *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_overload_v2alpha_ResourceMonitor_msginit, arena, len);
}

typedef enum {
  envoy_config_overload_v2alpha_ResourceMonitor_config_type_config = 2,
  envoy_config_overload_v2alpha_ResourceMonitor_config_type_typed_config = 3,
  envoy_config_overload_v2alpha_ResourceMonitor_config_type_NOT_SET = 0
} envoy_config_overload_v2alpha_ResourceMonitor_config_type_oneofcases;
UPB_INLINE envoy_config_overload_v2alpha_ResourceMonitor_config_type_oneofcases envoy_config_overload_v2alpha_ResourceMonitor_config_type_case(const envoy_config_overload_v2alpha_ResourceMonitor* msg) { return (envoy_config_overload_v2alpha_ResourceMonitor_config_type_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(12, 24), int32_t); }

UPB_INLINE upb_strview envoy_config_overload_v2alpha_ResourceMonitor_name(const envoy_config_overload_v2alpha_ResourceMonitor *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }
UPB_INLINE bool envoy_config_overload_v2alpha_ResourceMonitor_has_config(const envoy_config_overload_v2alpha_ResourceMonitor *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 2; }
UPB_INLINE const struct google_protobuf_Struct* envoy_config_overload_v2alpha_ResourceMonitor_config(const envoy_config_overload_v2alpha_ResourceMonitor *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Struct*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 2, NULL); }
UPB_INLINE bool envoy_config_overload_v2alpha_ResourceMonitor_has_typed_config(const envoy_config_overload_v2alpha_ResourceMonitor *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 3; }
UPB_INLINE const struct google_protobuf_Any* envoy_config_overload_v2alpha_ResourceMonitor_typed_config(const envoy_config_overload_v2alpha_ResourceMonitor *msg) { return UPB_READ_ONEOF(msg, const struct google_protobuf_Any*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 3, NULL); }

UPB_INLINE void envoy_config_overload_v2alpha_ResourceMonitor_set_name(envoy_config_overload_v2alpha_ResourceMonitor *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}
UPB_INLINE void envoy_config_overload_v2alpha_ResourceMonitor_set_config(envoy_config_overload_v2alpha_ResourceMonitor *msg, struct google_protobuf_Struct* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Struct*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 2);
}
UPB_INLINE struct google_protobuf_Struct* envoy_config_overload_v2alpha_ResourceMonitor_mutable_config(envoy_config_overload_v2alpha_ResourceMonitor *msg, upb_arena *arena) {
  struct google_protobuf_Struct* sub = (struct google_protobuf_Struct*)envoy_config_overload_v2alpha_ResourceMonitor_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Struct*)_upb_msg_new(&google_protobuf_Struct_msginit, arena);
    if (!sub) return NULL;
    envoy_config_overload_v2alpha_ResourceMonitor_set_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_config_overload_v2alpha_ResourceMonitor_set_typed_config(envoy_config_overload_v2alpha_ResourceMonitor *msg, struct google_protobuf_Any* value) {
  UPB_WRITE_ONEOF(msg, struct google_protobuf_Any*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 3);
}
UPB_INLINE struct google_protobuf_Any* envoy_config_overload_v2alpha_ResourceMonitor_mutable_typed_config(envoy_config_overload_v2alpha_ResourceMonitor *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_config_overload_v2alpha_ResourceMonitor_typed_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_config_overload_v2alpha_ResourceMonitor_set_typed_config(msg, sub);
  }
  return sub;
}

/* envoy.config.overload.v2alpha.ThresholdTrigger */

UPB_INLINE envoy_config_overload_v2alpha_ThresholdTrigger *envoy_config_overload_v2alpha_ThresholdTrigger_new(upb_arena *arena) {
  return (envoy_config_overload_v2alpha_ThresholdTrigger *)_upb_msg_new(&envoy_config_overload_v2alpha_ThresholdTrigger_msginit, arena);
}
UPB_INLINE envoy_config_overload_v2alpha_ThresholdTrigger *envoy_config_overload_v2alpha_ThresholdTrigger_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_overload_v2alpha_ThresholdTrigger *ret = envoy_config_overload_v2alpha_ThresholdTrigger_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_ThresholdTrigger_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_overload_v2alpha_ThresholdTrigger *envoy_config_overload_v2alpha_ThresholdTrigger_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_overload_v2alpha_ThresholdTrigger *ret = envoy_config_overload_v2alpha_ThresholdTrigger_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_ThresholdTrigger_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_overload_v2alpha_ThresholdTrigger_serialize(const envoy_config_overload_v2alpha_ThresholdTrigger *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_overload_v2alpha_ThresholdTrigger_msginit, arena, len);
}

UPB_INLINE double envoy_config_overload_v2alpha_ThresholdTrigger_value(const envoy_config_overload_v2alpha_ThresholdTrigger *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), double); }

UPB_INLINE void envoy_config_overload_v2alpha_ThresholdTrigger_set_value(envoy_config_overload_v2alpha_ThresholdTrigger *msg, double value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), double) = value;
}

/* envoy.config.overload.v2alpha.Trigger */

UPB_INLINE envoy_config_overload_v2alpha_Trigger *envoy_config_overload_v2alpha_Trigger_new(upb_arena *arena) {
  return (envoy_config_overload_v2alpha_Trigger *)_upb_msg_new(&envoy_config_overload_v2alpha_Trigger_msginit, arena);
}
UPB_INLINE envoy_config_overload_v2alpha_Trigger *envoy_config_overload_v2alpha_Trigger_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_overload_v2alpha_Trigger *ret = envoy_config_overload_v2alpha_Trigger_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_Trigger_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_overload_v2alpha_Trigger *envoy_config_overload_v2alpha_Trigger_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_overload_v2alpha_Trigger *ret = envoy_config_overload_v2alpha_Trigger_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_Trigger_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_overload_v2alpha_Trigger_serialize(const envoy_config_overload_v2alpha_Trigger *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_overload_v2alpha_Trigger_msginit, arena, len);
}

typedef enum {
  envoy_config_overload_v2alpha_Trigger_trigger_oneof_threshold = 2,
  envoy_config_overload_v2alpha_Trigger_trigger_oneof_NOT_SET = 0
} envoy_config_overload_v2alpha_Trigger_trigger_oneof_oneofcases;
UPB_INLINE envoy_config_overload_v2alpha_Trigger_trigger_oneof_oneofcases envoy_config_overload_v2alpha_Trigger_trigger_oneof_case(const envoy_config_overload_v2alpha_Trigger* msg) { return (envoy_config_overload_v2alpha_Trigger_trigger_oneof_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(12, 24), int32_t); }

UPB_INLINE upb_strview envoy_config_overload_v2alpha_Trigger_name(const envoy_config_overload_v2alpha_Trigger *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }
UPB_INLINE bool envoy_config_overload_v2alpha_Trigger_has_threshold(const envoy_config_overload_v2alpha_Trigger *msg) { return _upb_getoneofcase(msg, UPB_SIZE(12, 24)) == 2; }
UPB_INLINE const envoy_config_overload_v2alpha_ThresholdTrigger* envoy_config_overload_v2alpha_Trigger_threshold(const envoy_config_overload_v2alpha_Trigger *msg) { return UPB_READ_ONEOF(msg, const envoy_config_overload_v2alpha_ThresholdTrigger*, UPB_SIZE(8, 16), UPB_SIZE(12, 24), 2, NULL); }

UPB_INLINE void envoy_config_overload_v2alpha_Trigger_set_name(envoy_config_overload_v2alpha_Trigger *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}
UPB_INLINE void envoy_config_overload_v2alpha_Trigger_set_threshold(envoy_config_overload_v2alpha_Trigger *msg, envoy_config_overload_v2alpha_ThresholdTrigger* value) {
  UPB_WRITE_ONEOF(msg, envoy_config_overload_v2alpha_ThresholdTrigger*, UPB_SIZE(8, 16), value, UPB_SIZE(12, 24), 2);
}
UPB_INLINE struct envoy_config_overload_v2alpha_ThresholdTrigger* envoy_config_overload_v2alpha_Trigger_mutable_threshold(envoy_config_overload_v2alpha_Trigger *msg, upb_arena *arena) {
  struct envoy_config_overload_v2alpha_ThresholdTrigger* sub = (struct envoy_config_overload_v2alpha_ThresholdTrigger*)envoy_config_overload_v2alpha_Trigger_threshold(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_overload_v2alpha_ThresholdTrigger*)_upb_msg_new(&envoy_config_overload_v2alpha_ThresholdTrigger_msginit, arena);
    if (!sub) return NULL;
    envoy_config_overload_v2alpha_Trigger_set_threshold(msg, sub);
  }
  return sub;
}

/* envoy.config.overload.v2alpha.OverloadAction */

UPB_INLINE envoy_config_overload_v2alpha_OverloadAction *envoy_config_overload_v2alpha_OverloadAction_new(upb_arena *arena) {
  return (envoy_config_overload_v2alpha_OverloadAction *)_upb_msg_new(&envoy_config_overload_v2alpha_OverloadAction_msginit, arena);
}
UPB_INLINE envoy_config_overload_v2alpha_OverloadAction *envoy_config_overload_v2alpha_OverloadAction_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_overload_v2alpha_OverloadAction *ret = envoy_config_overload_v2alpha_OverloadAction_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_OverloadAction_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_overload_v2alpha_OverloadAction *envoy_config_overload_v2alpha_OverloadAction_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_overload_v2alpha_OverloadAction *ret = envoy_config_overload_v2alpha_OverloadAction_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_OverloadAction_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_overload_v2alpha_OverloadAction_serialize(const envoy_config_overload_v2alpha_OverloadAction *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_overload_v2alpha_OverloadAction_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_config_overload_v2alpha_OverloadAction_name(const envoy_config_overload_v2alpha_OverloadAction *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }
UPB_INLINE bool envoy_config_overload_v2alpha_OverloadAction_has_triggers(const envoy_config_overload_v2alpha_OverloadAction *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const envoy_config_overload_v2alpha_Trigger* const* envoy_config_overload_v2alpha_OverloadAction_triggers(const envoy_config_overload_v2alpha_OverloadAction *msg, size_t *len) { return (const envoy_config_overload_v2alpha_Trigger* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }

UPB_INLINE void envoy_config_overload_v2alpha_OverloadAction_set_name(envoy_config_overload_v2alpha_OverloadAction *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}
UPB_INLINE envoy_config_overload_v2alpha_Trigger** envoy_config_overload_v2alpha_OverloadAction_mutable_triggers(envoy_config_overload_v2alpha_OverloadAction *msg, size_t *len) {
  return (envoy_config_overload_v2alpha_Trigger**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE envoy_config_overload_v2alpha_Trigger** envoy_config_overload_v2alpha_OverloadAction_resize_triggers(envoy_config_overload_v2alpha_OverloadAction *msg, size_t len, upb_arena *arena) {
  return (envoy_config_overload_v2alpha_Trigger**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_config_overload_v2alpha_Trigger* envoy_config_overload_v2alpha_OverloadAction_add_triggers(envoy_config_overload_v2alpha_OverloadAction *msg, upb_arena *arena) {
  struct envoy_config_overload_v2alpha_Trigger* sub = (struct envoy_config_overload_v2alpha_Trigger*)_upb_msg_new(&envoy_config_overload_v2alpha_Trigger_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.config.overload.v2alpha.OverloadManager */

UPB_INLINE envoy_config_overload_v2alpha_OverloadManager *envoy_config_overload_v2alpha_OverloadManager_new(upb_arena *arena) {
  return (envoy_config_overload_v2alpha_OverloadManager *)_upb_msg_new(&envoy_config_overload_v2alpha_OverloadManager_msginit, arena);
}
UPB_INLINE envoy_config_overload_v2alpha_OverloadManager *envoy_config_overload_v2alpha_OverloadManager_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_config_overload_v2alpha_OverloadManager *ret = envoy_config_overload_v2alpha_OverloadManager_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_OverloadManager_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_config_overload_v2alpha_OverloadManager *envoy_config_overload_v2alpha_OverloadManager_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_config_overload_v2alpha_OverloadManager *ret = envoy_config_overload_v2alpha_OverloadManager_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_config_overload_v2alpha_OverloadManager_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_config_overload_v2alpha_OverloadManager_serialize(const envoy_config_overload_v2alpha_OverloadManager *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_config_overload_v2alpha_OverloadManager_msginit, arena, len);
}

UPB_INLINE bool envoy_config_overload_v2alpha_OverloadManager_has_refresh_interval(const envoy_config_overload_v2alpha_OverloadManager *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Duration* envoy_config_overload_v2alpha_OverloadManager_refresh_interval(const envoy_config_overload_v2alpha_OverloadManager *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_config_overload_v2alpha_OverloadManager_has_resource_monitors(const envoy_config_overload_v2alpha_OverloadManager *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const envoy_config_overload_v2alpha_ResourceMonitor* const* envoy_config_overload_v2alpha_OverloadManager_resource_monitors(const envoy_config_overload_v2alpha_OverloadManager *msg, size_t *len) { return (const envoy_config_overload_v2alpha_ResourceMonitor* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }
UPB_INLINE bool envoy_config_overload_v2alpha_OverloadManager_has_actions(const envoy_config_overload_v2alpha_OverloadManager *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(12, 24)); }
UPB_INLINE const envoy_config_overload_v2alpha_OverloadAction* const* envoy_config_overload_v2alpha_OverloadManager_actions(const envoy_config_overload_v2alpha_OverloadManager *msg, size_t *len) { return (const envoy_config_overload_v2alpha_OverloadAction* const*)_upb_array_accessor(msg, UPB_SIZE(12, 24), len); }

UPB_INLINE void envoy_config_overload_v2alpha_OverloadManager_set_refresh_interval(envoy_config_overload_v2alpha_OverloadManager *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_config_overload_v2alpha_OverloadManager_mutable_refresh_interval(envoy_config_overload_v2alpha_OverloadManager *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_config_overload_v2alpha_OverloadManager_refresh_interval(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_config_overload_v2alpha_OverloadManager_set_refresh_interval(msg, sub);
  }
  return sub;
}
UPB_INLINE envoy_config_overload_v2alpha_ResourceMonitor** envoy_config_overload_v2alpha_OverloadManager_mutable_resource_monitors(envoy_config_overload_v2alpha_OverloadManager *msg, size_t *len) {
  return (envoy_config_overload_v2alpha_ResourceMonitor**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE envoy_config_overload_v2alpha_ResourceMonitor** envoy_config_overload_v2alpha_OverloadManager_resize_resource_monitors(envoy_config_overload_v2alpha_OverloadManager *msg, size_t len, upb_arena *arena) {
  return (envoy_config_overload_v2alpha_ResourceMonitor**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_config_overload_v2alpha_ResourceMonitor* envoy_config_overload_v2alpha_OverloadManager_add_resource_monitors(envoy_config_overload_v2alpha_OverloadManager *msg, upb_arena *arena) {
  struct envoy_config_overload_v2alpha_ResourceMonitor* sub = (struct envoy_config_overload_v2alpha_ResourceMonitor*)_upb_msg_new(&envoy_config_overload_v2alpha_ResourceMonitor_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_config_overload_v2alpha_OverloadAction** envoy_config_overload_v2alpha_OverloadManager_mutable_actions(envoy_config_overload_v2alpha_OverloadManager *msg, size_t *len) {
  return (envoy_config_overload_v2alpha_OverloadAction**)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE envoy_config_overload_v2alpha_OverloadAction** envoy_config_overload_v2alpha_OverloadManager_resize_actions(envoy_config_overload_v2alpha_OverloadManager *msg, size_t len, upb_arena *arena) {
  return (envoy_config_overload_v2alpha_OverloadAction**)_upb_array_resize_accessor2(msg, UPB_SIZE(12, 24), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_config_overload_v2alpha_OverloadAction* envoy_config_overload_v2alpha_OverloadManager_add_actions(envoy_config_overload_v2alpha_OverloadManager *msg, upb_arena *arena) {
  struct envoy_config_overload_v2alpha_OverloadAction* sub = (struct envoy_config_overload_v2alpha_OverloadAction*)_upb_msg_new(&envoy_config_overload_v2alpha_OverloadAction_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(12, 24), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

extern const upb_msglayout_file envoy_config_overload_v2alpha_overload_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_CONFIG_OVERLOAD_V2ALPHA_OVERLOAD_PROTO_UPB_H_ */
