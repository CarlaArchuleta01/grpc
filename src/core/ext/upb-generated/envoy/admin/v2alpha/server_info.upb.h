/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/admin/v2alpha/server_info.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_ADMIN_V2ALPHA_SERVER_INFO_PROTO_UPB_H_
#define ENVOY_ADMIN_V2ALPHA_SERVER_INFO_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_admin_v2alpha_ServerInfo;
struct envoy_admin_v2alpha_CommandLineOptions;
typedef struct envoy_admin_v2alpha_ServerInfo envoy_admin_v2alpha_ServerInfo;
typedef struct envoy_admin_v2alpha_CommandLineOptions envoy_admin_v2alpha_CommandLineOptions;
extern const upb_msglayout envoy_admin_v2alpha_ServerInfo_msginit;
extern const upb_msglayout envoy_admin_v2alpha_CommandLineOptions_msginit;
struct google_protobuf_Duration;
extern const upb_msglayout google_protobuf_Duration_msginit;

typedef enum {
  envoy_admin_v2alpha_CommandLineOptions_v4 = 0,
  envoy_admin_v2alpha_CommandLineOptions_v6 = 1
} envoy_admin_v2alpha_CommandLineOptions_IpVersion;

typedef enum {
  envoy_admin_v2alpha_CommandLineOptions_Serve = 0,
  envoy_admin_v2alpha_CommandLineOptions_Validate = 1,
  envoy_admin_v2alpha_CommandLineOptions_InitOnly = 2
} envoy_admin_v2alpha_CommandLineOptions_Mode;

typedef enum {
  envoy_admin_v2alpha_ServerInfo_LIVE = 0,
  envoy_admin_v2alpha_ServerInfo_DRAINING = 1,
  envoy_admin_v2alpha_ServerInfo_PRE_INITIALIZING = 2,
  envoy_admin_v2alpha_ServerInfo_INITIALIZING = 3
} envoy_admin_v2alpha_ServerInfo_State;


/* envoy.admin.v2alpha.ServerInfo */

UPB_INLINE envoy_admin_v2alpha_ServerInfo *envoy_admin_v2alpha_ServerInfo_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ServerInfo *)_upb_msg_new(&envoy_admin_v2alpha_ServerInfo_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ServerInfo *envoy_admin_v2alpha_ServerInfo_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ServerInfo *ret = envoy_admin_v2alpha_ServerInfo_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ServerInfo_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ServerInfo *envoy_admin_v2alpha_ServerInfo_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ServerInfo *ret = envoy_admin_v2alpha_ServerInfo_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ServerInfo_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ServerInfo_serialize(const envoy_admin_v2alpha_ServerInfo *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ServerInfo_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ServerInfo_version(const envoy_admin_v2alpha_ServerInfo *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), upb_strview); }
UPB_INLINE int32_t envoy_admin_v2alpha_ServerInfo_state(const envoy_admin_v2alpha_ServerInfo *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 4), int32_t); }
UPB_INLINE bool envoy_admin_v2alpha_ServerInfo_has_uptime_current_epoch(const envoy_admin_v2alpha_ServerInfo *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Duration* envoy_admin_v2alpha_ServerInfo_uptime_current_epoch(const envoy_admin_v2alpha_ServerInfo *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(24, 40), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_admin_v2alpha_ServerInfo_has_uptime_all_epochs(const envoy_admin_v2alpha_ServerInfo *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Duration* envoy_admin_v2alpha_ServerInfo_uptime_all_epochs(const envoy_admin_v2alpha_ServerInfo *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(28, 48), const struct google_protobuf_Duration*); }
UPB_INLINE upb_strview envoy_admin_v2alpha_ServerInfo_hot_restart_version(const envoy_admin_v2alpha_ServerInfo *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 24), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ServerInfo_has_command_line_options(const envoy_admin_v2alpha_ServerInfo *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const envoy_admin_v2alpha_CommandLineOptions* envoy_admin_v2alpha_ServerInfo_command_line_options(const envoy_admin_v2alpha_ServerInfo *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(32, 56), const envoy_admin_v2alpha_CommandLineOptions*); }

UPB_INLINE void envoy_admin_v2alpha_ServerInfo_set_version(envoy_admin_v2alpha_ServerInfo *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ServerInfo_set_state(envoy_admin_v2alpha_ServerInfo *msg, int32_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 4), int32_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ServerInfo_set_uptime_current_epoch(envoy_admin_v2alpha_ServerInfo *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(24, 40), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_admin_v2alpha_ServerInfo_mutable_uptime_current_epoch(envoy_admin_v2alpha_ServerInfo *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_admin_v2alpha_ServerInfo_uptime_current_epoch(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ServerInfo_set_uptime_current_epoch(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ServerInfo_set_uptime_all_epochs(envoy_admin_v2alpha_ServerInfo *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(28, 48), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_admin_v2alpha_ServerInfo_mutable_uptime_all_epochs(envoy_admin_v2alpha_ServerInfo *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_admin_v2alpha_ServerInfo_uptime_all_epochs(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ServerInfo_set_uptime_all_epochs(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ServerInfo_set_hot_restart_version(envoy_admin_v2alpha_ServerInfo *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 24), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ServerInfo_set_command_line_options(envoy_admin_v2alpha_ServerInfo *msg, envoy_admin_v2alpha_CommandLineOptions* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(32, 56), envoy_admin_v2alpha_CommandLineOptions*) = value;
}
UPB_INLINE struct envoy_admin_v2alpha_CommandLineOptions* envoy_admin_v2alpha_ServerInfo_mutable_command_line_options(envoy_admin_v2alpha_ServerInfo *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_CommandLineOptions* sub = (struct envoy_admin_v2alpha_CommandLineOptions*)envoy_admin_v2alpha_ServerInfo_command_line_options(msg);
  if (sub == NULL) {
    sub = (struct envoy_admin_v2alpha_CommandLineOptions*)_upb_msg_new(&envoy_admin_v2alpha_CommandLineOptions_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ServerInfo_set_command_line_options(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.CommandLineOptions */

UPB_INLINE envoy_admin_v2alpha_CommandLineOptions *envoy_admin_v2alpha_CommandLineOptions_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_CommandLineOptions *)_upb_msg_new(&envoy_admin_v2alpha_CommandLineOptions_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_CommandLineOptions *envoy_admin_v2alpha_CommandLineOptions_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_CommandLineOptions *ret = envoy_admin_v2alpha_CommandLineOptions_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_CommandLineOptions_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_CommandLineOptions *envoy_admin_v2alpha_CommandLineOptions_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_CommandLineOptions *ret = envoy_admin_v2alpha_CommandLineOptions_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_CommandLineOptions_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_CommandLineOptions_serialize(const envoy_admin_v2alpha_CommandLineOptions *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_CommandLineOptions_msginit, arena, len);
}

UPB_INLINE uint64_t envoy_admin_v2alpha_CommandLineOptions_base_id(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t); }
UPB_INLINE uint32_t envoy_admin_v2alpha_CommandLineOptions_concurrency(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(40, 40), uint32_t); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_config_path(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(56, 56), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_config_yaml(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(64, 72), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_allow_unknown_static_fields(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(48, 48), bool); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_admin_address_path(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(72, 88), upb_strview); }
UPB_INLINE int32_t envoy_admin_v2alpha_CommandLineOptions_local_address_ip_version(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int32_t); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_log_level(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(80, 104), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_component_log_level(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(88, 120), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_log_format(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(96, 136), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_log_path(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(104, 152), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_service_cluster(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(112, 168), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_service_node(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(120, 184), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_CommandLineOptions_service_zone(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(128, 200), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_has_file_flush_interval(const envoy_admin_v2alpha_CommandLineOptions *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Duration* envoy_admin_v2alpha_CommandLineOptions_file_flush_interval(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(136, 216), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_has_drain_time(const envoy_admin_v2alpha_CommandLineOptions *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Duration* envoy_admin_v2alpha_CommandLineOptions_drain_time(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(140, 224), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_has_parent_shutdown_time(const envoy_admin_v2alpha_CommandLineOptions *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const struct google_protobuf_Duration* envoy_admin_v2alpha_CommandLineOptions_parent_shutdown_time(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(144, 232), const struct google_protobuf_Duration*); }
UPB_INLINE int32_t envoy_admin_v2alpha_CommandLineOptions_mode(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 20), int32_t); }
UPB_INLINE uint64_t envoy_admin_v2alpha_CommandLineOptions_max_stats(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(24, 24), uint64_t); }
UPB_INLINE uint64_t envoy_admin_v2alpha_CommandLineOptions_max_obj_name_len(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(32, 32), uint64_t); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_disable_hot_restart(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(49, 49), bool); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_enable_mutex_tracing(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(50, 50), bool); }
UPB_INLINE uint32_t envoy_admin_v2alpha_CommandLineOptions_restart_epoch(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(44, 44), uint32_t); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_cpuset_threads(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(51, 51), bool); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_reject_unknown_dynamic_fields(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(52, 52), bool); }
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_log_format_escaped(const envoy_admin_v2alpha_CommandLineOptions *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(53, 53), bool); }
UPB_INLINE upb_strview const* envoy_admin_v2alpha_CommandLineOptions_disabled_extensions(const envoy_admin_v2alpha_CommandLineOptions *msg, size_t *len) { return (upb_strview const*)_upb_array_accessor(msg, UPB_SIZE(148, 240), len); }

UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_base_id(envoy_admin_v2alpha_CommandLineOptions *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_concurrency(envoy_admin_v2alpha_CommandLineOptions *msg, uint32_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(40, 40), uint32_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_config_path(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(56, 56), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_config_yaml(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(64, 72), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_allow_unknown_static_fields(envoy_admin_v2alpha_CommandLineOptions *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(48, 48), bool) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_admin_address_path(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(72, 88), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_local_address_ip_version(envoy_admin_v2alpha_CommandLineOptions *msg, int32_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int32_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_log_level(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(80, 104), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_component_log_level(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(88, 120), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_log_format(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(96, 136), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_log_path(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(104, 152), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_service_cluster(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(112, 168), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_service_node(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(120, 184), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_service_zone(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(128, 200), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_file_flush_interval(envoy_admin_v2alpha_CommandLineOptions *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(136, 216), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_admin_v2alpha_CommandLineOptions_mutable_file_flush_interval(envoy_admin_v2alpha_CommandLineOptions *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_admin_v2alpha_CommandLineOptions_file_flush_interval(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_CommandLineOptions_set_file_flush_interval(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_drain_time(envoy_admin_v2alpha_CommandLineOptions *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(140, 224), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_admin_v2alpha_CommandLineOptions_mutable_drain_time(envoy_admin_v2alpha_CommandLineOptions *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_admin_v2alpha_CommandLineOptions_drain_time(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_CommandLineOptions_set_drain_time(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_parent_shutdown_time(envoy_admin_v2alpha_CommandLineOptions *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(144, 232), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_admin_v2alpha_CommandLineOptions_mutable_parent_shutdown_time(envoy_admin_v2alpha_CommandLineOptions *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_admin_v2alpha_CommandLineOptions_parent_shutdown_time(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_CommandLineOptions_set_parent_shutdown_time(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_mode(envoy_admin_v2alpha_CommandLineOptions *msg, int32_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(20, 20), int32_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_max_stats(envoy_admin_v2alpha_CommandLineOptions *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), uint64_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_max_obj_name_len(envoy_admin_v2alpha_CommandLineOptions *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(32, 32), uint64_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_disable_hot_restart(envoy_admin_v2alpha_CommandLineOptions *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(49, 49), bool) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_enable_mutex_tracing(envoy_admin_v2alpha_CommandLineOptions *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(50, 50), bool) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_restart_epoch(envoy_admin_v2alpha_CommandLineOptions *msg, uint32_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(44, 44), uint32_t) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_cpuset_threads(envoy_admin_v2alpha_CommandLineOptions *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(51, 51), bool) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_reject_unknown_dynamic_fields(envoy_admin_v2alpha_CommandLineOptions *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(52, 52), bool) = value;
}
UPB_INLINE void envoy_admin_v2alpha_CommandLineOptions_set_log_format_escaped(envoy_admin_v2alpha_CommandLineOptions *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(53, 53), bool) = value;
}
UPB_INLINE upb_strview* envoy_admin_v2alpha_CommandLineOptions_mutable_disabled_extensions(envoy_admin_v2alpha_CommandLineOptions *msg, size_t *len) {
  return (upb_strview*)_upb_array_mutable_accessor(msg, UPB_SIZE(148, 240), len);
}
UPB_INLINE upb_strview* envoy_admin_v2alpha_CommandLineOptions_resize_disabled_extensions(envoy_admin_v2alpha_CommandLineOptions *msg, size_t len, upb_arena *arena) {
  return (upb_strview*)_upb_array_resize_accessor2(msg, UPB_SIZE(148, 240), len, UPB_SIZE(3, 4), arena);
}
UPB_INLINE bool envoy_admin_v2alpha_CommandLineOptions_add_disabled_extensions(envoy_admin_v2alpha_CommandLineOptions *msg, upb_strview val, upb_arena *arena) {
  return _upb_array_append_accessor2(msg, UPB_SIZE(148, 240), UPB_SIZE(3, 4), &val,
      arena);
}

extern const upb_msglayout_file envoy_admin_v2alpha_server_info_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_ADMIN_V2ALPHA_SERVER_INFO_PROTO_UPB_H_ */
