/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/admin/v2alpha/config_dump.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_ADMIN_V2ALPHA_CONFIG_DUMP_PROTO_UPB_H_
#define ENVOY_ADMIN_V2ALPHA_CONFIG_DUMP_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_admin_v2alpha_ConfigDump;
struct envoy_admin_v2alpha_UpdateFailureState;
struct envoy_admin_v2alpha_BootstrapConfigDump;
struct envoy_admin_v2alpha_ListenersConfigDump;
struct envoy_admin_v2alpha_ListenersConfigDump_StaticListener;
struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState;
struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListener;
struct envoy_admin_v2alpha_ClustersConfigDump;
struct envoy_admin_v2alpha_ClustersConfigDump_StaticCluster;
struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster;
struct envoy_admin_v2alpha_RoutesConfigDump;
struct envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig;
struct envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig;
struct envoy_admin_v2alpha_ScopedRoutesConfigDump;
struct envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs;
struct envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs;
struct envoy_admin_v2alpha_SecretsConfigDump;
struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret;
struct envoy_admin_v2alpha_SecretsConfigDump_StaticSecret;
typedef struct envoy_admin_v2alpha_ConfigDump envoy_admin_v2alpha_ConfigDump;
typedef struct envoy_admin_v2alpha_UpdateFailureState envoy_admin_v2alpha_UpdateFailureState;
typedef struct envoy_admin_v2alpha_BootstrapConfigDump envoy_admin_v2alpha_BootstrapConfigDump;
typedef struct envoy_admin_v2alpha_ListenersConfigDump envoy_admin_v2alpha_ListenersConfigDump;
typedef struct envoy_admin_v2alpha_ListenersConfigDump_StaticListener envoy_admin_v2alpha_ListenersConfigDump_StaticListener;
typedef struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState;
typedef struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListener envoy_admin_v2alpha_ListenersConfigDump_DynamicListener;
typedef struct envoy_admin_v2alpha_ClustersConfigDump envoy_admin_v2alpha_ClustersConfigDump;
typedef struct envoy_admin_v2alpha_ClustersConfigDump_StaticCluster envoy_admin_v2alpha_ClustersConfigDump_StaticCluster;
typedef struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster;
typedef struct envoy_admin_v2alpha_RoutesConfigDump envoy_admin_v2alpha_RoutesConfigDump;
typedef struct envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig;
typedef struct envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig;
typedef struct envoy_admin_v2alpha_ScopedRoutesConfigDump envoy_admin_v2alpha_ScopedRoutesConfigDump;
typedef struct envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs;
typedef struct envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs;
typedef struct envoy_admin_v2alpha_SecretsConfigDump envoy_admin_v2alpha_SecretsConfigDump;
typedef struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret;
typedef struct envoy_admin_v2alpha_SecretsConfigDump_StaticSecret envoy_admin_v2alpha_SecretsConfigDump_StaticSecret;
extern const upb_msglayout envoy_admin_v2alpha_ConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_UpdateFailureState_msginit;
extern const upb_msglayout envoy_admin_v2alpha_BootstrapConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ListenersConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ListenersConfigDump_StaticListener_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ClustersConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit;
extern const upb_msglayout envoy_admin_v2alpha_RoutesConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_msginit;
extern const upb_msglayout envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ScopedRoutesConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_msginit;
extern const upb_msglayout envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_msginit;
extern const upb_msglayout envoy_admin_v2alpha_SecretsConfigDump_msginit;
extern const upb_msglayout envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit;
extern const upb_msglayout envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_msginit;
struct envoy_config_bootstrap_v2_Bootstrap;
struct google_protobuf_Any;
struct google_protobuf_Timestamp;
extern const upb_msglayout envoy_config_bootstrap_v2_Bootstrap_msginit;
extern const upb_msglayout google_protobuf_Any_msginit;
extern const upb_msglayout google_protobuf_Timestamp_msginit;


/* envoy.admin.v2alpha.ConfigDump */

UPB_INLINE envoy_admin_v2alpha_ConfigDump *envoy_admin_v2alpha_ConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_ConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ConfigDump *envoy_admin_v2alpha_ConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ConfigDump *ret = envoy_admin_v2alpha_ConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ConfigDump *envoy_admin_v2alpha_ConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ConfigDump *ret = envoy_admin_v2alpha_ConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ConfigDump_serialize(const envoy_admin_v2alpha_ConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ConfigDump_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_ConfigDump_has_configs(const envoy_admin_v2alpha_ConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const struct google_protobuf_Any* const* envoy_admin_v2alpha_ConfigDump_configs(const envoy_admin_v2alpha_ConfigDump *msg, size_t *len) { return (const struct google_protobuf_Any* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE struct google_protobuf_Any** envoy_admin_v2alpha_ConfigDump_mutable_configs(envoy_admin_v2alpha_ConfigDump *msg, size_t *len) {
  return (struct google_protobuf_Any**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE struct google_protobuf_Any** envoy_admin_v2alpha_ConfigDump_resize_configs(envoy_admin_v2alpha_ConfigDump *msg, size_t len, upb_arena *arena) {
  return (struct google_protobuf_Any**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ConfigDump_add_configs(envoy_admin_v2alpha_ConfigDump *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.admin.v2alpha.UpdateFailureState */

UPB_INLINE envoy_admin_v2alpha_UpdateFailureState *envoy_admin_v2alpha_UpdateFailureState_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_UpdateFailureState *)_upb_msg_new(&envoy_admin_v2alpha_UpdateFailureState_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_UpdateFailureState *envoy_admin_v2alpha_UpdateFailureState_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_UpdateFailureState *ret = envoy_admin_v2alpha_UpdateFailureState_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_UpdateFailureState_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_UpdateFailureState *envoy_admin_v2alpha_UpdateFailureState_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_UpdateFailureState *ret = envoy_admin_v2alpha_UpdateFailureState_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_UpdateFailureState_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_UpdateFailureState_serialize(const envoy_admin_v2alpha_UpdateFailureState *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_UpdateFailureState_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_UpdateFailureState_has_failed_configuration(const envoy_admin_v2alpha_UpdateFailureState *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_UpdateFailureState_failed_configuration(const envoy_admin_v2alpha_UpdateFailureState *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_UpdateFailureState_has_last_update_attempt(const envoy_admin_v2alpha_UpdateFailureState *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_UpdateFailureState_last_update_attempt(const envoy_admin_v2alpha_UpdateFailureState *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct google_protobuf_Timestamp*); }
UPB_INLINE upb_strview envoy_admin_v2alpha_UpdateFailureState_details(const envoy_admin_v2alpha_UpdateFailureState *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }

UPB_INLINE void envoy_admin_v2alpha_UpdateFailureState_set_failed_configuration(envoy_admin_v2alpha_UpdateFailureState *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_UpdateFailureState_mutable_failed_configuration(envoy_admin_v2alpha_UpdateFailureState *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_UpdateFailureState_failed_configuration(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_UpdateFailureState_set_failed_configuration(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_UpdateFailureState_set_last_update_attempt(envoy_admin_v2alpha_UpdateFailureState *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_UpdateFailureState_mutable_last_update_attempt(envoy_admin_v2alpha_UpdateFailureState *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_UpdateFailureState_last_update_attempt(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_UpdateFailureState_set_last_update_attempt(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_UpdateFailureState_set_details(envoy_admin_v2alpha_UpdateFailureState *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}

/* envoy.admin.v2alpha.BootstrapConfigDump */

UPB_INLINE envoy_admin_v2alpha_BootstrapConfigDump *envoy_admin_v2alpha_BootstrapConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_BootstrapConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_BootstrapConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_BootstrapConfigDump *envoy_admin_v2alpha_BootstrapConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_BootstrapConfigDump *ret = envoy_admin_v2alpha_BootstrapConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_BootstrapConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_BootstrapConfigDump *envoy_admin_v2alpha_BootstrapConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_BootstrapConfigDump *ret = envoy_admin_v2alpha_BootstrapConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_BootstrapConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_BootstrapConfigDump_serialize(const envoy_admin_v2alpha_BootstrapConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_BootstrapConfigDump_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_BootstrapConfigDump_has_bootstrap(const envoy_admin_v2alpha_BootstrapConfigDump *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_config_bootstrap_v2_Bootstrap* envoy_admin_v2alpha_BootstrapConfigDump_bootstrap(const envoy_admin_v2alpha_BootstrapConfigDump *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct envoy_config_bootstrap_v2_Bootstrap*); }
UPB_INLINE bool envoy_admin_v2alpha_BootstrapConfigDump_has_last_updated(const envoy_admin_v2alpha_BootstrapConfigDump *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_BootstrapConfigDump_last_updated(const envoy_admin_v2alpha_BootstrapConfigDump *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_BootstrapConfigDump_set_bootstrap(envoy_admin_v2alpha_BootstrapConfigDump *msg, struct envoy_config_bootstrap_v2_Bootstrap* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct envoy_config_bootstrap_v2_Bootstrap*) = value;
}
UPB_INLINE struct envoy_config_bootstrap_v2_Bootstrap* envoy_admin_v2alpha_BootstrapConfigDump_mutable_bootstrap(envoy_admin_v2alpha_BootstrapConfigDump *msg, upb_arena *arena) {
  struct envoy_config_bootstrap_v2_Bootstrap* sub = (struct envoy_config_bootstrap_v2_Bootstrap*)envoy_admin_v2alpha_BootstrapConfigDump_bootstrap(msg);
  if (sub == NULL) {
    sub = (struct envoy_config_bootstrap_v2_Bootstrap*)_upb_msg_new(&envoy_config_bootstrap_v2_Bootstrap_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_BootstrapConfigDump_set_bootstrap(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_BootstrapConfigDump_set_last_updated(envoy_admin_v2alpha_BootstrapConfigDump *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_BootstrapConfigDump_mutable_last_updated(envoy_admin_v2alpha_BootstrapConfigDump *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_BootstrapConfigDump_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_BootstrapConfigDump_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ListenersConfigDump */

UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump *envoy_admin_v2alpha_ListenersConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ListenersConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump *envoy_admin_v2alpha_ListenersConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump *ret = envoy_admin_v2alpha_ListenersConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump *envoy_admin_v2alpha_ListenersConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump *ret = envoy_admin_v2alpha_ListenersConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ListenersConfigDump_serialize(const envoy_admin_v2alpha_ListenersConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ListenersConfigDump_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ListenersConfigDump_version_info(const envoy_admin_v2alpha_ListenersConfigDump *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_has_static_listeners(const envoy_admin_v2alpha_ListenersConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const envoy_admin_v2alpha_ListenersConfigDump_StaticListener* const* envoy_admin_v2alpha_ListenersConfigDump_static_listeners(const envoy_admin_v2alpha_ListenersConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ListenersConfigDump_StaticListener* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_has_dynamic_listeners(const envoy_admin_v2alpha_ListenersConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(12, 24)); }
UPB_INLINE const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener* const* envoy_admin_v2alpha_ListenersConfigDump_dynamic_listeners(const envoy_admin_v2alpha_ListenersConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener* const*)_upb_array_accessor(msg, UPB_SIZE(12, 24), len); }

UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_set_version_info(envoy_admin_v2alpha_ListenersConfigDump *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_StaticListener** envoy_admin_v2alpha_ListenersConfigDump_mutable_static_listeners(envoy_admin_v2alpha_ListenersConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ListenersConfigDump_StaticListener**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_StaticListener** envoy_admin_v2alpha_ListenersConfigDump_resize_static_listeners(envoy_admin_v2alpha_ListenersConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ListenersConfigDump_StaticListener**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ListenersConfigDump_StaticListener* envoy_admin_v2alpha_ListenersConfigDump_add_static_listeners(envoy_admin_v2alpha_ListenersConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ListenersConfigDump_StaticListener* sub = (struct envoy_admin_v2alpha_ListenersConfigDump_StaticListener*)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_StaticListener_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListener** envoy_admin_v2alpha_ListenersConfigDump_mutable_dynamic_listeners(envoy_admin_v2alpha_ListenersConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ListenersConfigDump_DynamicListener**)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListener** envoy_admin_v2alpha_ListenersConfigDump_resize_dynamic_listeners(envoy_admin_v2alpha_ListenersConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ListenersConfigDump_DynamicListener**)_upb_array_resize_accessor2(msg, UPB_SIZE(12, 24), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListener* envoy_admin_v2alpha_ListenersConfigDump_add_dynamic_listeners(envoy_admin_v2alpha_ListenersConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListener* sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListener*)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(12, 24), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.admin.v2alpha.ListenersConfigDump.StaticListener */

UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_StaticListener *envoy_admin_v2alpha_ListenersConfigDump_StaticListener_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ListenersConfigDump_StaticListener *)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_StaticListener_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_StaticListener *envoy_admin_v2alpha_ListenersConfigDump_StaticListener_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump_StaticListener *ret = envoy_admin_v2alpha_ListenersConfigDump_StaticListener_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_StaticListener_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_StaticListener *envoy_admin_v2alpha_ListenersConfigDump_StaticListener_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump_StaticListener *ret = envoy_admin_v2alpha_ListenersConfigDump_StaticListener_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_StaticListener_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ListenersConfigDump_StaticListener_serialize(const envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ListenersConfigDump_StaticListener_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_StaticListener_has_listener(const envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_ListenersConfigDump_StaticListener_listener(const envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_StaticListener_has_last_updated(const envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_ListenersConfigDump_StaticListener_last_updated(const envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_StaticListener_set_listener(envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ListenersConfigDump_StaticListener_mutable_listener(envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_ListenersConfigDump_StaticListener_listener(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_StaticListener_set_listener(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_StaticListener_set_last_updated(envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_ListenersConfigDump_StaticListener_mutable_last_updated(envoy_admin_v2alpha_ListenersConfigDump_StaticListener *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_ListenersConfigDump_StaticListener_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_StaticListener_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ListenersConfigDump.DynamicListenerState */

UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *ret = envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *ret = envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_serialize(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_version_info(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_has_listener(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_listener(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_has_last_updated(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_last_updated(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_set_version_info(envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_set_listener(envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_mutable_listener(envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_listener(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_set_listener(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_set_last_updated(envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_mutable_last_updated(envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ListenersConfigDump.DynamicListener */

UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *ret = envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *ret = envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_serialize(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_name(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_has_active_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_active_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_has_warming_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_warming_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_has_draining_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_draining_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), const envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*); }
UPB_INLINE bool envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_has_error_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return _upb_hasbit(msg, 4); }
UPB_INLINE const envoy_admin_v2alpha_UpdateFailureState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_error_state(const envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(24, 48), const envoy_admin_v2alpha_UpdateFailureState*); }

UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_name(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_active_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*) = value;
}
UPB_INLINE struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_mutable_active_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*)envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_active_state(msg);
  if (sub == NULL) {
    sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_active_state(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_warming_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*) = value;
}
UPB_INLINE struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_mutable_warming_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*)envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_warming_state(msg);
  if (sub == NULL) {
    sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_warming_state(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_draining_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*) = value;
}
UPB_INLINE struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_mutable_draining_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState* sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*)envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_draining_state(msg);
  if (sub == NULL) {
    sub = (struct envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState*)_upb_msg_new(&envoy_admin_v2alpha_ListenersConfigDump_DynamicListenerState_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_draining_state(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_error_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, envoy_admin_v2alpha_UpdateFailureState* value) {
  _upb_sethas(msg, 4);
  *UPB_PTR_AT(msg, UPB_SIZE(24, 48), envoy_admin_v2alpha_UpdateFailureState*) = value;
}
UPB_INLINE struct envoy_admin_v2alpha_UpdateFailureState* envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_mutable_error_state(envoy_admin_v2alpha_ListenersConfigDump_DynamicListener *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_UpdateFailureState* sub = (struct envoy_admin_v2alpha_UpdateFailureState*)envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_error_state(msg);
  if (sub == NULL) {
    sub = (struct envoy_admin_v2alpha_UpdateFailureState*)_upb_msg_new(&envoy_admin_v2alpha_UpdateFailureState_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ListenersConfigDump_DynamicListener_set_error_state(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ClustersConfigDump */

UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump *envoy_admin_v2alpha_ClustersConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ClustersConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_ClustersConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump *envoy_admin_v2alpha_ClustersConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ClustersConfigDump *ret = envoy_admin_v2alpha_ClustersConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ClustersConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump *envoy_admin_v2alpha_ClustersConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ClustersConfigDump *ret = envoy_admin_v2alpha_ClustersConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ClustersConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ClustersConfigDump_serialize(const envoy_admin_v2alpha_ClustersConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ClustersConfigDump_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ClustersConfigDump_version_info(const envoy_admin_v2alpha_ClustersConfigDump *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_has_static_clusters(const envoy_admin_v2alpha_ClustersConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster* const* envoy_admin_v2alpha_ClustersConfigDump_static_clusters(const envoy_admin_v2alpha_ClustersConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }
UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_has_dynamic_active_clusters(const envoy_admin_v2alpha_ClustersConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(12, 24)); }
UPB_INLINE const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* const* envoy_admin_v2alpha_ClustersConfigDump_dynamic_active_clusters(const envoy_admin_v2alpha_ClustersConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* const*)_upb_array_accessor(msg, UPB_SIZE(12, 24), len); }
UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_has_dynamic_warming_clusters(const envoy_admin_v2alpha_ClustersConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(16, 32)); }
UPB_INLINE const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* const* envoy_admin_v2alpha_ClustersConfigDump_dynamic_warming_clusters(const envoy_admin_v2alpha_ClustersConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* const*)_upb_array_accessor(msg, UPB_SIZE(16, 32), len); }

UPB_INLINE void envoy_admin_v2alpha_ClustersConfigDump_set_version_info(envoy_admin_v2alpha_ClustersConfigDump *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_StaticCluster** envoy_admin_v2alpha_ClustersConfigDump_mutable_static_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ClustersConfigDump_StaticCluster**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_StaticCluster** envoy_admin_v2alpha_ClustersConfigDump_resize_static_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ClustersConfigDump_StaticCluster**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ClustersConfigDump_StaticCluster* envoy_admin_v2alpha_ClustersConfigDump_add_static_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ClustersConfigDump_StaticCluster* sub = (struct envoy_admin_v2alpha_ClustersConfigDump_StaticCluster*)_upb_msg_new(&envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster** envoy_admin_v2alpha_ClustersConfigDump_mutable_dynamic_active_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster**)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster** envoy_admin_v2alpha_ClustersConfigDump_resize_dynamic_active_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster**)_upb_array_resize_accessor2(msg, UPB_SIZE(12, 24), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* envoy_admin_v2alpha_ClustersConfigDump_add_dynamic_active_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* sub = (struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster*)_upb_msg_new(&envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(12, 24), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster** envoy_admin_v2alpha_ClustersConfigDump_mutable_dynamic_warming_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster**)_upb_array_mutable_accessor(msg, UPB_SIZE(16, 32), len);
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster** envoy_admin_v2alpha_ClustersConfigDump_resize_dynamic_warming_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster**)_upb_array_resize_accessor2(msg, UPB_SIZE(16, 32), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* envoy_admin_v2alpha_ClustersConfigDump_add_dynamic_warming_clusters(envoy_admin_v2alpha_ClustersConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster* sub = (struct envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster*)_upb_msg_new(&envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(16, 32), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.admin.v2alpha.ClustersConfigDump.StaticCluster */

UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *)_upb_msg_new(&envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *ret = envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *ret = envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_serialize(const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_has_cluster(const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_cluster(const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_has_last_updated(const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_last_updated(const envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_set_cluster(envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_mutable_cluster(envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_cluster(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_set_cluster(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_set_last_updated(envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_mutable_last_updated(envoy_admin_v2alpha_ClustersConfigDump_StaticCluster *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ClustersConfigDump_StaticCluster_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ClustersConfigDump.DynamicCluster */

UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *)_upb_msg_new(&envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *ret = envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *ret = envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_serialize(const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_version_info(const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_has_cluster(const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_cluster(const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_has_last_updated(const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_last_updated(const envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_set_version_info(envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_set_cluster(envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_mutable_cluster(envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_cluster(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_set_cluster(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_set_last_updated(envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_mutable_last_updated(envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ClustersConfigDump_DynamicCluster_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.RoutesConfigDump */

UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump *envoy_admin_v2alpha_RoutesConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_RoutesConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_RoutesConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump *envoy_admin_v2alpha_RoutesConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_RoutesConfigDump *ret = envoy_admin_v2alpha_RoutesConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_RoutesConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump *envoy_admin_v2alpha_RoutesConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_RoutesConfigDump *ret = envoy_admin_v2alpha_RoutesConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_RoutesConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_RoutesConfigDump_serialize(const envoy_admin_v2alpha_RoutesConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_RoutesConfigDump_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_RoutesConfigDump_has_static_route_configs(const envoy_admin_v2alpha_RoutesConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig* const* envoy_admin_v2alpha_RoutesConfigDump_static_route_configs(const envoy_admin_v2alpha_RoutesConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }
UPB_INLINE bool envoy_admin_v2alpha_RoutesConfigDump_has_dynamic_route_configs(const envoy_admin_v2alpha_RoutesConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(4, 8)); }
UPB_INLINE const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig* const* envoy_admin_v2alpha_RoutesConfigDump_dynamic_route_configs(const envoy_admin_v2alpha_RoutesConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig* const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len); }

UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig** envoy_admin_v2alpha_RoutesConfigDump_mutable_static_route_configs(envoy_admin_v2alpha_RoutesConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig** envoy_admin_v2alpha_RoutesConfigDump_resize_static_route_configs(envoy_admin_v2alpha_RoutesConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig* envoy_admin_v2alpha_RoutesConfigDump_add_static_route_configs(envoy_admin_v2alpha_RoutesConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig* sub = (struct envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig*)_upb_msg_new(&envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig** envoy_admin_v2alpha_RoutesConfigDump_mutable_dynamic_route_configs(envoy_admin_v2alpha_RoutesConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig**)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig** envoy_admin_v2alpha_RoutesConfigDump_resize_dynamic_route_configs(envoy_admin_v2alpha_RoutesConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig**)_upb_array_resize_accessor2(msg, UPB_SIZE(4, 8), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig* envoy_admin_v2alpha_RoutesConfigDump_add_dynamic_route_configs(envoy_admin_v2alpha_RoutesConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig* sub = (struct envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig*)_upb_msg_new(&envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(4, 8), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.admin.v2alpha.RoutesConfigDump.StaticRouteConfig */

UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *)_upb_msg_new(&envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *ret = envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *ret = envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_serialize(const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_has_route_config(const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_route_config(const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_has_last_updated(const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_last_updated(const envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_set_route_config(envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_mutable_route_config(envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_route_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_set_route_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_set_last_updated(envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_mutable_last_updated(envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_RoutesConfigDump_StaticRouteConfig_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.RoutesConfigDump.DynamicRouteConfig */

UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *)_upb_msg_new(&envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *ret = envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *ret = envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_serialize(const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_version_info(const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_has_route_config(const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_route_config(const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Any*); }
UPB_INLINE bool envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_has_last_updated(const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_last_updated(const envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_set_version_info(envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_set_route_config(envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_mutable_route_config(envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_route_config(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_set_route_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_set_last_updated(envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_mutable_last_updated(envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_RoutesConfigDump_DynamicRouteConfig_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ScopedRoutesConfigDump */

UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump *envoy_admin_v2alpha_ScopedRoutesConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_ScopedRoutesConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump *envoy_admin_v2alpha_ScopedRoutesConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ScopedRoutesConfigDump *ret = envoy_admin_v2alpha_ScopedRoutesConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ScopedRoutesConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump *envoy_admin_v2alpha_ScopedRoutesConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ScopedRoutesConfigDump *ret = envoy_admin_v2alpha_ScopedRoutesConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ScopedRoutesConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ScopedRoutesConfigDump_serialize(const envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ScopedRoutesConfigDump_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_ScopedRoutesConfigDump_has_inline_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs* const* envoy_admin_v2alpha_ScopedRoutesConfigDump_inline_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }
UPB_INLINE bool envoy_admin_v2alpha_ScopedRoutesConfigDump_has_dynamic_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(4, 8)); }
UPB_INLINE const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs* const* envoy_admin_v2alpha_ScopedRoutesConfigDump_dynamic_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs* const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len); }

UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs** envoy_admin_v2alpha_ScopedRoutesConfigDump_mutable_inline_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs** envoy_admin_v2alpha_ScopedRoutesConfigDump_resize_inline_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs* envoy_admin_v2alpha_ScopedRoutesConfigDump_add_inline_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs* sub = (struct envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs*)_upb_msg_new(&envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs** envoy_admin_v2alpha_ScopedRoutesConfigDump_mutable_dynamic_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs**)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs** envoy_admin_v2alpha_ScopedRoutesConfigDump_resize_dynamic_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs**)_upb_array_resize_accessor2(msg, UPB_SIZE(4, 8), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs* envoy_admin_v2alpha_ScopedRoutesConfigDump_add_dynamic_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs* sub = (struct envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs*)_upb_msg_new(&envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(4, 8), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.admin.v2alpha.ScopedRoutesConfigDump.InlineScopedRouteConfigs */

UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *)_upb_msg_new(&envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *ret = envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *ret = envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_serialize(const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_name(const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_has_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(16, 32)); }
UPB_INLINE const struct google_protobuf_Any* const* envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, size_t *len) { return (const struct google_protobuf_Any* const*)_upb_array_accessor(msg, UPB_SIZE(16, 32), len); }
UPB_INLINE bool envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_has_last_updated(const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_last_updated(const envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_set_name(envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE struct google_protobuf_Any** envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_mutable_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, size_t *len) {
  return (struct google_protobuf_Any**)_upb_array_mutable_accessor(msg, UPB_SIZE(16, 32), len);
}
UPB_INLINE struct google_protobuf_Any** envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_resize_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, size_t len, upb_arena *arena) {
  return (struct google_protobuf_Any**)_upb_array_resize_accessor2(msg, UPB_SIZE(16, 32), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_add_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(16, 32), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_set_last_updated(envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_mutable_last_updated(envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ScopedRoutesConfigDump_InlineScopedRouteConfigs_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.ScopedRoutesConfigDump.DynamicScopedRouteConfigs */

UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *)_upb_msg_new(&envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *ret = envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *ret = envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_serialize(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_name(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_version_info(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_has_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(24, 48)); }
UPB_INLINE const struct google_protobuf_Any* const* envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_scoped_route_configs(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, size_t *len) { return (const struct google_protobuf_Any* const*)_upb_array_accessor(msg, UPB_SIZE(24, 48), len); }
UPB_INLINE bool envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_has_last_updated(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_last_updated(const envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), const struct google_protobuf_Timestamp*); }

UPB_INLINE void envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_set_name(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_set_version_info(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview) = value;
}
UPB_INLINE struct google_protobuf_Any** envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_mutable_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, size_t *len) {
  return (struct google_protobuf_Any**)_upb_array_mutable_accessor(msg, UPB_SIZE(24, 48), len);
}
UPB_INLINE struct google_protobuf_Any** envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_resize_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, size_t len, upb_arena *arena) {
  return (struct google_protobuf_Any**)_upb_array_resize_accessor2(msg, UPB_SIZE(24, 48), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_add_scoped_route_configs(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(24, 48), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_set_last_updated(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_mutable_last_updated(envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_ScopedRoutesConfigDump_DynamicScopedRouteConfigs_set_last_updated(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.SecretsConfigDump */

UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump *envoy_admin_v2alpha_SecretsConfigDump_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_SecretsConfigDump *)_upb_msg_new(&envoy_admin_v2alpha_SecretsConfigDump_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump *envoy_admin_v2alpha_SecretsConfigDump_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_SecretsConfigDump *ret = envoy_admin_v2alpha_SecretsConfigDump_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_SecretsConfigDump_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump *envoy_admin_v2alpha_SecretsConfigDump_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_SecretsConfigDump *ret = envoy_admin_v2alpha_SecretsConfigDump_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_SecretsConfigDump_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_SecretsConfigDump_serialize(const envoy_admin_v2alpha_SecretsConfigDump *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_SecretsConfigDump_msginit, arena, len);
}

UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_has_static_secrets(const envoy_admin_v2alpha_SecretsConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret* const* envoy_admin_v2alpha_SecretsConfigDump_static_secrets(const envoy_admin_v2alpha_SecretsConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }
UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_has_dynamic_active_secrets(const envoy_admin_v2alpha_SecretsConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(4, 8)); }
UPB_INLINE const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* const* envoy_admin_v2alpha_SecretsConfigDump_dynamic_active_secrets(const envoy_admin_v2alpha_SecretsConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len); }
UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_has_dynamic_warming_secrets(const envoy_admin_v2alpha_SecretsConfigDump *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16)); }
UPB_INLINE const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* const* envoy_admin_v2alpha_SecretsConfigDump_dynamic_warming_secrets(const envoy_admin_v2alpha_SecretsConfigDump *msg, size_t *len) { return (const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len); }

UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_StaticSecret** envoy_admin_v2alpha_SecretsConfigDump_mutable_static_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_SecretsConfigDump_StaticSecret**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_StaticSecret** envoy_admin_v2alpha_SecretsConfigDump_resize_static_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_SecretsConfigDump_StaticSecret**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_SecretsConfigDump_StaticSecret* envoy_admin_v2alpha_SecretsConfigDump_add_static_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_SecretsConfigDump_StaticSecret* sub = (struct envoy_admin_v2alpha_SecretsConfigDump_StaticSecret*)_upb_msg_new(&envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret** envoy_admin_v2alpha_SecretsConfigDump_mutable_dynamic_active_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret**)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret** envoy_admin_v2alpha_SecretsConfigDump_resize_dynamic_active_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret**)_upb_array_resize_accessor2(msg, UPB_SIZE(4, 8), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* envoy_admin_v2alpha_SecretsConfigDump_add_dynamic_active_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* sub = (struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret*)_upb_msg_new(&envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(4, 8), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret** envoy_admin_v2alpha_SecretsConfigDump_mutable_dynamic_warming_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, size_t *len) {
  return (envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret** envoy_admin_v2alpha_SecretsConfigDump_resize_dynamic_warming_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, size_t len, upb_arena *arena) {
  return (envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret**)_upb_array_resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* envoy_admin_v2alpha_SecretsConfigDump_add_dynamic_warming_secrets(envoy_admin_v2alpha_SecretsConfigDump *msg, upb_arena *arena) {
  struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret* sub = (struct envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret*)_upb_msg_new(&envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.admin.v2alpha.SecretsConfigDump.DynamicSecret */

UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *)_upb_msg_new(&envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *ret = envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *ret = envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_serialize(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_name(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE upb_strview envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_version_info(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_has_last_updated(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_last_updated(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 40), const struct google_protobuf_Timestamp*); }
UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_has_secret(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_secret(const envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(24, 48), const struct google_protobuf_Any*); }

UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_set_name(envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_set_version_info(envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_set_last_updated(envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 40), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_mutable_last_updated(envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_set_last_updated(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_set_secret(envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(24, 48), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_mutable_secret(envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_secret(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_SecretsConfigDump_DynamicSecret_set_secret(msg, sub);
  }
  return sub;
}

/* envoy.admin.v2alpha.SecretsConfigDump.StaticSecret */

UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_new(upb_arena *arena) {
  return (envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *)_upb_msg_new(&envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_msginit, arena);
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *ret = envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *ret = envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_serialize(const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_name(const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_has_last_updated(const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Timestamp* envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_last_updated(const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct google_protobuf_Timestamp*); }
UPB_INLINE bool envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_has_secret(const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Any* envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_secret(const envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 32), const struct google_protobuf_Any*); }

UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_set_name(envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_set_last_updated(envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg, struct google_protobuf_Timestamp* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct google_protobuf_Timestamp*) = value;
}
UPB_INLINE struct google_protobuf_Timestamp* envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_mutable_last_updated(envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg, upb_arena *arena) {
  struct google_protobuf_Timestamp* sub = (struct google_protobuf_Timestamp*)envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_last_updated(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Timestamp*)_upb_msg_new(&google_protobuf_Timestamp_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_set_last_updated(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_set_secret(envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg, struct google_protobuf_Any* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 32), struct google_protobuf_Any*) = value;
}
UPB_INLINE struct google_protobuf_Any* envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_mutable_secret(envoy_admin_v2alpha_SecretsConfigDump_StaticSecret *msg, upb_arena *arena) {
  struct google_protobuf_Any* sub = (struct google_protobuf_Any*)envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_secret(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Any*)_upb_msg_new(&google_protobuf_Any_msginit, arena);
    if (!sub) return NULL;
    envoy_admin_v2alpha_SecretsConfigDump_StaticSecret_set_secret(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_admin_v2alpha_config_dump_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_ADMIN_V2ALPHA_CONFIG_DUMP_PROTO_UPB_H_ */
