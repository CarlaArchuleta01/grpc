/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/type/hash_policy.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_TYPE_HASH_POLICY_PROTO_UPB_H_
#define ENVOY_TYPE_HASH_POLICY_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_type_HashPolicy;
struct envoy_type_HashPolicy_SourceIp;
typedef struct envoy_type_HashPolicy envoy_type_HashPolicy;
typedef struct envoy_type_HashPolicy_SourceIp envoy_type_HashPolicy_SourceIp;
extern const upb_msglayout envoy_type_HashPolicy_msginit;
extern const upb_msglayout envoy_type_HashPolicy_SourceIp_msginit;


/* envoy.type.HashPolicy */

UPB_INLINE envoy_type_HashPolicy *envoy_type_HashPolicy_new(upb_arena *arena) {
  return (envoy_type_HashPolicy *)_upb_msg_new(&envoy_type_HashPolicy_msginit, arena);
}
UPB_INLINE envoy_type_HashPolicy *envoy_type_HashPolicy_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_type_HashPolicy *ret = envoy_type_HashPolicy_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_type_HashPolicy_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_type_HashPolicy *envoy_type_HashPolicy_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_type_HashPolicy *ret = envoy_type_HashPolicy_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_type_HashPolicy_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_type_HashPolicy_serialize(const envoy_type_HashPolicy *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_type_HashPolicy_msginit, arena, len);
}

typedef enum {
  envoy_type_HashPolicy_policy_specifier_source_ip = 1,
  envoy_type_HashPolicy_policy_specifier_NOT_SET = 0
} envoy_type_HashPolicy_policy_specifier_oneofcases;
UPB_INLINE envoy_type_HashPolicy_policy_specifier_oneofcases envoy_type_HashPolicy_policy_specifier_case(const envoy_type_HashPolicy* msg) { return (envoy_type_HashPolicy_policy_specifier_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(4, 8), int32_t); }

UPB_INLINE bool envoy_type_HashPolicy_has_source_ip(const envoy_type_HashPolicy *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 1; }
UPB_INLINE const envoy_type_HashPolicy_SourceIp* envoy_type_HashPolicy_source_ip(const envoy_type_HashPolicy *msg) { return UPB_READ_ONEOF(msg, const envoy_type_HashPolicy_SourceIp*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 1, NULL); }

UPB_INLINE void envoy_type_HashPolicy_set_source_ip(envoy_type_HashPolicy *msg, envoy_type_HashPolicy_SourceIp* value) {
  UPB_WRITE_ONEOF(msg, envoy_type_HashPolicy_SourceIp*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 1);
}
UPB_INLINE struct envoy_type_HashPolicy_SourceIp* envoy_type_HashPolicy_mutable_source_ip(envoy_type_HashPolicy *msg, upb_arena *arena) {
  struct envoy_type_HashPolicy_SourceIp* sub = (struct envoy_type_HashPolicy_SourceIp*)envoy_type_HashPolicy_source_ip(msg);
  if (sub == NULL) {
    sub = (struct envoy_type_HashPolicy_SourceIp*)_upb_msg_new(&envoy_type_HashPolicy_SourceIp_msginit, arena);
    if (!sub) return NULL;
    envoy_type_HashPolicy_set_source_ip(msg, sub);
  }
  return sub;
}

/* envoy.type.HashPolicy.SourceIp */

UPB_INLINE envoy_type_HashPolicy_SourceIp *envoy_type_HashPolicy_SourceIp_new(upb_arena *arena) {
  return (envoy_type_HashPolicy_SourceIp *)_upb_msg_new(&envoy_type_HashPolicy_SourceIp_msginit, arena);
}
UPB_INLINE envoy_type_HashPolicy_SourceIp *envoy_type_HashPolicy_SourceIp_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_type_HashPolicy_SourceIp *ret = envoy_type_HashPolicy_SourceIp_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_type_HashPolicy_SourceIp_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_type_HashPolicy_SourceIp *envoy_type_HashPolicy_SourceIp_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_type_HashPolicy_SourceIp *ret = envoy_type_HashPolicy_SourceIp_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_type_HashPolicy_SourceIp_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_type_HashPolicy_SourceIp_serialize(const envoy_type_HashPolicy_SourceIp *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_type_HashPolicy_SourceIp_msginit, arena, len);
}



extern const upb_msglayout_file envoy_type_hash_policy_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_TYPE_HASH_POLICY_PROTO_UPB_H_ */
