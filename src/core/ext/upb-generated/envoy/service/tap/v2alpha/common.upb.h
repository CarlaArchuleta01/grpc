/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/service/tap/v2alpha/common.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_SERVICE_TAP_V2ALPHA_COMMON_PROTO_UPB_H_
#define ENVOY_SERVICE_TAP_V2ALPHA_COMMON_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_service_tap_v2alpha_TapConfig;
struct envoy_service_tap_v2alpha_MatchPredicate;
struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet;
struct envoy_service_tap_v2alpha_HttpHeadersMatch;
struct envoy_service_tap_v2alpha_OutputConfig;
struct envoy_service_tap_v2alpha_OutputSink;
struct envoy_service_tap_v2alpha_StreamingAdminSink;
struct envoy_service_tap_v2alpha_FilePerTapSink;
struct envoy_service_tap_v2alpha_StreamingGrpcSink;
typedef struct envoy_service_tap_v2alpha_TapConfig envoy_service_tap_v2alpha_TapConfig;
typedef struct envoy_service_tap_v2alpha_MatchPredicate envoy_service_tap_v2alpha_MatchPredicate;
typedef struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet envoy_service_tap_v2alpha_MatchPredicate_MatchSet;
typedef struct envoy_service_tap_v2alpha_HttpHeadersMatch envoy_service_tap_v2alpha_HttpHeadersMatch;
typedef struct envoy_service_tap_v2alpha_OutputConfig envoy_service_tap_v2alpha_OutputConfig;
typedef struct envoy_service_tap_v2alpha_OutputSink envoy_service_tap_v2alpha_OutputSink;
typedef struct envoy_service_tap_v2alpha_StreamingAdminSink envoy_service_tap_v2alpha_StreamingAdminSink;
typedef struct envoy_service_tap_v2alpha_FilePerTapSink envoy_service_tap_v2alpha_FilePerTapSink;
typedef struct envoy_service_tap_v2alpha_StreamingGrpcSink envoy_service_tap_v2alpha_StreamingGrpcSink;
extern const upb_msglayout envoy_service_tap_v2alpha_TapConfig_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_MatchPredicate_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_HttpHeadersMatch_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_OutputConfig_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_OutputSink_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_StreamingAdminSink_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_FilePerTapSink_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_StreamingGrpcSink_msginit;
struct envoy_api_v2_core_GrpcService;
struct envoy_api_v2_core_RuntimeFractionalPercent;
struct envoy_api_v2_route_HeaderMatcher;
struct google_protobuf_UInt32Value;
extern const upb_msglayout envoy_api_v2_core_GrpcService_msginit;
extern const upb_msglayout envoy_api_v2_core_RuntimeFractionalPercent_msginit;
extern const upb_msglayout envoy_api_v2_route_HeaderMatcher_msginit;
extern const upb_msglayout google_protobuf_UInt32Value_msginit;

typedef enum {
  envoy_service_tap_v2alpha_OutputSink_JSON_BODY_AS_BYTES = 0,
  envoy_service_tap_v2alpha_OutputSink_JSON_BODY_AS_STRING = 1,
  envoy_service_tap_v2alpha_OutputSink_PROTO_BINARY = 2,
  envoy_service_tap_v2alpha_OutputSink_PROTO_BINARY_LENGTH_DELIMITED = 3,
  envoy_service_tap_v2alpha_OutputSink_PROTO_TEXT = 4
} envoy_service_tap_v2alpha_OutputSink_Format;


/* envoy.service.tap.v2alpha.TapConfig */

UPB_INLINE envoy_service_tap_v2alpha_TapConfig *envoy_service_tap_v2alpha_TapConfig_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_TapConfig *)_upb_msg_new(&envoy_service_tap_v2alpha_TapConfig_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_TapConfig *envoy_service_tap_v2alpha_TapConfig_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_TapConfig *ret = envoy_service_tap_v2alpha_TapConfig_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_TapConfig_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_TapConfig *envoy_service_tap_v2alpha_TapConfig_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_TapConfig *ret = envoy_service_tap_v2alpha_TapConfig_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_TapConfig_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_TapConfig_serialize(const envoy_service_tap_v2alpha_TapConfig *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_TapConfig_msginit, arena, len);
}

UPB_INLINE bool envoy_service_tap_v2alpha_TapConfig_has_match_config(const envoy_service_tap_v2alpha_TapConfig *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const envoy_service_tap_v2alpha_MatchPredicate* envoy_service_tap_v2alpha_TapConfig_match_config(const envoy_service_tap_v2alpha_TapConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const envoy_service_tap_v2alpha_MatchPredicate*); }
UPB_INLINE bool envoy_service_tap_v2alpha_TapConfig_has_output_config(const envoy_service_tap_v2alpha_TapConfig *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const envoy_service_tap_v2alpha_OutputConfig* envoy_service_tap_v2alpha_TapConfig_output_config(const envoy_service_tap_v2alpha_TapConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const envoy_service_tap_v2alpha_OutputConfig*); }
UPB_INLINE bool envoy_service_tap_v2alpha_TapConfig_has_tap_enabled(const envoy_service_tap_v2alpha_TapConfig *msg) { return _upb_hasbit(msg, 3); }
UPB_INLINE const struct envoy_api_v2_core_RuntimeFractionalPercent* envoy_service_tap_v2alpha_TapConfig_tap_enabled(const envoy_service_tap_v2alpha_TapConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_RuntimeFractionalPercent*); }

UPB_INLINE void envoy_service_tap_v2alpha_TapConfig_set_match_config(envoy_service_tap_v2alpha_TapConfig *msg, envoy_service_tap_v2alpha_MatchPredicate* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), envoy_service_tap_v2alpha_MatchPredicate*) = value;
}
UPB_INLINE struct envoy_service_tap_v2alpha_MatchPredicate* envoy_service_tap_v2alpha_TapConfig_mutable_match_config(envoy_service_tap_v2alpha_TapConfig *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_MatchPredicate* sub = (struct envoy_service_tap_v2alpha_MatchPredicate*)envoy_service_tap_v2alpha_TapConfig_match_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_MatchPredicate*)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_TapConfig_set_match_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_TapConfig_set_output_config(envoy_service_tap_v2alpha_TapConfig *msg, envoy_service_tap_v2alpha_OutputConfig* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), envoy_service_tap_v2alpha_OutputConfig*) = value;
}
UPB_INLINE struct envoy_service_tap_v2alpha_OutputConfig* envoy_service_tap_v2alpha_TapConfig_mutable_output_config(envoy_service_tap_v2alpha_TapConfig *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_OutputConfig* sub = (struct envoy_service_tap_v2alpha_OutputConfig*)envoy_service_tap_v2alpha_TapConfig_output_config(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_OutputConfig*)_upb_msg_new(&envoy_service_tap_v2alpha_OutputConfig_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_TapConfig_set_output_config(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_TapConfig_set_tap_enabled(envoy_service_tap_v2alpha_TapConfig *msg, struct envoy_api_v2_core_RuntimeFractionalPercent* value) {
  _upb_sethas(msg, 3);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_RuntimeFractionalPercent*) = value;
}
UPB_INLINE struct envoy_api_v2_core_RuntimeFractionalPercent* envoy_service_tap_v2alpha_TapConfig_mutable_tap_enabled(envoy_service_tap_v2alpha_TapConfig *msg, upb_arena *arena) {
  struct envoy_api_v2_core_RuntimeFractionalPercent* sub = (struct envoy_api_v2_core_RuntimeFractionalPercent*)envoy_service_tap_v2alpha_TapConfig_tap_enabled(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_RuntimeFractionalPercent*)_upb_msg_new(&envoy_api_v2_core_RuntimeFractionalPercent_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_TapConfig_set_tap_enabled(msg, sub);
  }
  return sub;
}

/* envoy.service.tap.v2alpha.MatchPredicate */

UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate *envoy_service_tap_v2alpha_MatchPredicate_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_MatchPredicate *)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate *envoy_service_tap_v2alpha_MatchPredicate_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_MatchPredicate *ret = envoy_service_tap_v2alpha_MatchPredicate_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_MatchPredicate_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate *envoy_service_tap_v2alpha_MatchPredicate_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_MatchPredicate *ret = envoy_service_tap_v2alpha_MatchPredicate_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_MatchPredicate_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_MatchPredicate_serialize(const envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_MatchPredicate_msginit, arena, len);
}

typedef enum {
  envoy_service_tap_v2alpha_MatchPredicate_rule_or_match = 1,
  envoy_service_tap_v2alpha_MatchPredicate_rule_and_match = 2,
  envoy_service_tap_v2alpha_MatchPredicate_rule_not_match = 3,
  envoy_service_tap_v2alpha_MatchPredicate_rule_any_match = 4,
  envoy_service_tap_v2alpha_MatchPredicate_rule_http_request_headers_match = 5,
  envoy_service_tap_v2alpha_MatchPredicate_rule_http_request_trailers_match = 6,
  envoy_service_tap_v2alpha_MatchPredicate_rule_http_response_headers_match = 7,
  envoy_service_tap_v2alpha_MatchPredicate_rule_http_response_trailers_match = 8,
  envoy_service_tap_v2alpha_MatchPredicate_rule_NOT_SET = 0
} envoy_service_tap_v2alpha_MatchPredicate_rule_oneofcases;
UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate_rule_oneofcases envoy_service_tap_v2alpha_MatchPredicate_rule_case(const envoy_service_tap_v2alpha_MatchPredicate* msg) { return (envoy_service_tap_v2alpha_MatchPredicate_rule_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(4, 8), int32_t); }

UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_or_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 1; }
UPB_INLINE const envoy_service_tap_v2alpha_MatchPredicate_MatchSet* envoy_service_tap_v2alpha_MatchPredicate_or_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_MatchPredicate_MatchSet*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 1, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_and_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 2; }
UPB_INLINE const envoy_service_tap_v2alpha_MatchPredicate_MatchSet* envoy_service_tap_v2alpha_MatchPredicate_and_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_MatchPredicate_MatchSet*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 2, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_not_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 3; }
UPB_INLINE const envoy_service_tap_v2alpha_MatchPredicate* envoy_service_tap_v2alpha_MatchPredicate_not_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_MatchPredicate*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 3, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_any_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 4; }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_any_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, bool, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 4, false); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_http_request_headers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 5; }
UPB_INLINE const envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_http_request_headers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 5, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_http_request_trailers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 6; }
UPB_INLINE const envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_http_request_trailers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 6, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_http_response_headers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 7; }
UPB_INLINE const envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_http_response_headers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 7, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_has_http_response_trailers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return _upb_getoneofcase(msg, UPB_SIZE(4, 8)) == 8; }
UPB_INLINE const envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_http_response_trailers_match(const envoy_service_tap_v2alpha_MatchPredicate *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), UPB_SIZE(4, 8), 8, NULL); }

UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_or_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_MatchPredicate_MatchSet* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_MatchPredicate_MatchSet*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 1);
}
UPB_INLINE struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet* envoy_service_tap_v2alpha_MatchPredicate_mutable_or_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet* sub = (struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet*)envoy_service_tap_v2alpha_MatchPredicate_or_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet*)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_or_match(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_and_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_MatchPredicate_MatchSet* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_MatchPredicate_MatchSet*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 2);
}
UPB_INLINE struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet* envoy_service_tap_v2alpha_MatchPredicate_mutable_and_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet* sub = (struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet*)envoy_service_tap_v2alpha_MatchPredicate_and_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_MatchPredicate_MatchSet*)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_and_match(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_not_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_MatchPredicate* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_MatchPredicate*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 3);
}
UPB_INLINE struct envoy_service_tap_v2alpha_MatchPredicate* envoy_service_tap_v2alpha_MatchPredicate_mutable_not_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_MatchPredicate* sub = (struct envoy_service_tap_v2alpha_MatchPredicate*)envoy_service_tap_v2alpha_MatchPredicate_not_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_MatchPredicate*)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_not_match(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_any_match(envoy_service_tap_v2alpha_MatchPredicate *msg, bool value) {
  UPB_WRITE_ONEOF(msg, bool, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 4);
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_http_request_headers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_HttpHeadersMatch* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 5);
}
UPB_INLINE struct envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_mutable_http_request_headers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_HttpHeadersMatch* sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)envoy_service_tap_v2alpha_MatchPredicate_http_request_headers_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)_upb_msg_new(&envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_http_request_headers_match(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_http_request_trailers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_HttpHeadersMatch* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 6);
}
UPB_INLINE struct envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_mutable_http_request_trailers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_HttpHeadersMatch* sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)envoy_service_tap_v2alpha_MatchPredicate_http_request_trailers_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)_upb_msg_new(&envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_http_request_trailers_match(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_http_response_headers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_HttpHeadersMatch* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 7);
}
UPB_INLINE struct envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_mutable_http_response_headers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_HttpHeadersMatch* sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)envoy_service_tap_v2alpha_MatchPredicate_http_response_headers_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)_upb_msg_new(&envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_http_response_headers_match(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_MatchPredicate_set_http_response_trailers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, envoy_service_tap_v2alpha_HttpHeadersMatch* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_HttpHeadersMatch*, UPB_SIZE(0, 0), value, UPB_SIZE(4, 8), 8);
}
UPB_INLINE struct envoy_service_tap_v2alpha_HttpHeadersMatch* envoy_service_tap_v2alpha_MatchPredicate_mutable_http_response_trailers_match(envoy_service_tap_v2alpha_MatchPredicate *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_HttpHeadersMatch* sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)envoy_service_tap_v2alpha_MatchPredicate_http_response_trailers_match(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_HttpHeadersMatch*)_upb_msg_new(&envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_MatchPredicate_set_http_response_trailers_match(msg, sub);
  }
  return sub;
}

/* envoy.service.tap.v2alpha.MatchPredicate.MatchSet */

UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate_MatchSet *envoy_service_tap_v2alpha_MatchPredicate_MatchSet_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_MatchPredicate_MatchSet *)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate_MatchSet *envoy_service_tap_v2alpha_MatchPredicate_MatchSet_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_MatchPredicate_MatchSet *ret = envoy_service_tap_v2alpha_MatchPredicate_MatchSet_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate_MatchSet *envoy_service_tap_v2alpha_MatchPredicate_MatchSet_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_MatchPredicate_MatchSet *ret = envoy_service_tap_v2alpha_MatchPredicate_MatchSet_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_MatchPredicate_MatchSet_serialize(const envoy_service_tap_v2alpha_MatchPredicate_MatchSet *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_MatchPredicate_MatchSet_msginit, arena, len);
}

UPB_INLINE bool envoy_service_tap_v2alpha_MatchPredicate_MatchSet_has_rules(const envoy_service_tap_v2alpha_MatchPredicate_MatchSet *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const envoy_service_tap_v2alpha_MatchPredicate* const* envoy_service_tap_v2alpha_MatchPredicate_MatchSet_rules(const envoy_service_tap_v2alpha_MatchPredicate_MatchSet *msg, size_t *len) { return (const envoy_service_tap_v2alpha_MatchPredicate* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate** envoy_service_tap_v2alpha_MatchPredicate_MatchSet_mutable_rules(envoy_service_tap_v2alpha_MatchPredicate_MatchSet *msg, size_t *len) {
  return (envoy_service_tap_v2alpha_MatchPredicate**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE envoy_service_tap_v2alpha_MatchPredicate** envoy_service_tap_v2alpha_MatchPredicate_MatchSet_resize_rules(envoy_service_tap_v2alpha_MatchPredicate_MatchSet *msg, size_t len, upb_arena *arena) {
  return (envoy_service_tap_v2alpha_MatchPredicate**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_service_tap_v2alpha_MatchPredicate* envoy_service_tap_v2alpha_MatchPredicate_MatchSet_add_rules(envoy_service_tap_v2alpha_MatchPredicate_MatchSet *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_MatchPredicate* sub = (struct envoy_service_tap_v2alpha_MatchPredicate*)_upb_msg_new(&envoy_service_tap_v2alpha_MatchPredicate_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.service.tap.v2alpha.HttpHeadersMatch */

UPB_INLINE envoy_service_tap_v2alpha_HttpHeadersMatch *envoy_service_tap_v2alpha_HttpHeadersMatch_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_HttpHeadersMatch *)_upb_msg_new(&envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_HttpHeadersMatch *envoy_service_tap_v2alpha_HttpHeadersMatch_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_HttpHeadersMatch *ret = envoy_service_tap_v2alpha_HttpHeadersMatch_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_HttpHeadersMatch *envoy_service_tap_v2alpha_HttpHeadersMatch_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_HttpHeadersMatch *ret = envoy_service_tap_v2alpha_HttpHeadersMatch_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_HttpHeadersMatch_serialize(const envoy_service_tap_v2alpha_HttpHeadersMatch *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_HttpHeadersMatch_msginit, arena, len);
}

UPB_INLINE bool envoy_service_tap_v2alpha_HttpHeadersMatch_has_headers(const envoy_service_tap_v2alpha_HttpHeadersMatch *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(0, 0)); }
UPB_INLINE const struct envoy_api_v2_route_HeaderMatcher* const* envoy_service_tap_v2alpha_HttpHeadersMatch_headers(const envoy_service_tap_v2alpha_HttpHeadersMatch *msg, size_t *len) { return (const struct envoy_api_v2_route_HeaderMatcher* const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len); }

UPB_INLINE struct envoy_api_v2_route_HeaderMatcher** envoy_service_tap_v2alpha_HttpHeadersMatch_mutable_headers(envoy_service_tap_v2alpha_HttpHeadersMatch *msg, size_t *len) {
  return (struct envoy_api_v2_route_HeaderMatcher**)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE struct envoy_api_v2_route_HeaderMatcher** envoy_service_tap_v2alpha_HttpHeadersMatch_resize_headers(envoy_service_tap_v2alpha_HttpHeadersMatch *msg, size_t len, upb_arena *arena) {
  return (struct envoy_api_v2_route_HeaderMatcher**)_upb_array_resize_accessor2(msg, UPB_SIZE(0, 0), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_api_v2_route_HeaderMatcher* envoy_service_tap_v2alpha_HttpHeadersMatch_add_headers(envoy_service_tap_v2alpha_HttpHeadersMatch *msg, upb_arena *arena) {
  struct envoy_api_v2_route_HeaderMatcher* sub = (struct envoy_api_v2_route_HeaderMatcher*)_upb_msg_new(&envoy_api_v2_route_HeaderMatcher_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(0, 0), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* envoy.service.tap.v2alpha.OutputConfig */

UPB_INLINE envoy_service_tap_v2alpha_OutputConfig *envoy_service_tap_v2alpha_OutputConfig_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_OutputConfig *)_upb_msg_new(&envoy_service_tap_v2alpha_OutputConfig_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_OutputConfig *envoy_service_tap_v2alpha_OutputConfig_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_OutputConfig *ret = envoy_service_tap_v2alpha_OutputConfig_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_OutputConfig_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_OutputConfig *envoy_service_tap_v2alpha_OutputConfig_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_OutputConfig *ret = envoy_service_tap_v2alpha_OutputConfig_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_OutputConfig_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_OutputConfig_serialize(const envoy_service_tap_v2alpha_OutputConfig *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_OutputConfig_msginit, arena, len);
}

UPB_INLINE bool envoy_service_tap_v2alpha_OutputConfig_has_sinks(const envoy_service_tap_v2alpha_OutputConfig *msg) { return _upb_has_submsg_nohasbit(msg, UPB_SIZE(12, 24)); }
UPB_INLINE const envoy_service_tap_v2alpha_OutputSink* const* envoy_service_tap_v2alpha_OutputConfig_sinks(const envoy_service_tap_v2alpha_OutputConfig *msg, size_t *len) { return (const envoy_service_tap_v2alpha_OutputSink* const*)_upb_array_accessor(msg, UPB_SIZE(12, 24), len); }
UPB_INLINE bool envoy_service_tap_v2alpha_OutputConfig_has_max_buffered_rx_bytes(const envoy_service_tap_v2alpha_OutputConfig *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_UInt32Value* envoy_service_tap_v2alpha_OutputConfig_max_buffered_rx_bytes(const envoy_service_tap_v2alpha_OutputConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_UInt32Value*); }
UPB_INLINE bool envoy_service_tap_v2alpha_OutputConfig_has_max_buffered_tx_bytes(const envoy_service_tap_v2alpha_OutputConfig *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_UInt32Value* envoy_service_tap_v2alpha_OutputConfig_max_buffered_tx_bytes(const envoy_service_tap_v2alpha_OutputConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_UInt32Value*); }
UPB_INLINE bool envoy_service_tap_v2alpha_OutputConfig_streaming(const envoy_service_tap_v2alpha_OutputConfig *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool); }

UPB_INLINE envoy_service_tap_v2alpha_OutputSink** envoy_service_tap_v2alpha_OutputConfig_mutable_sinks(envoy_service_tap_v2alpha_OutputConfig *msg, size_t *len) {
  return (envoy_service_tap_v2alpha_OutputSink**)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE envoy_service_tap_v2alpha_OutputSink** envoy_service_tap_v2alpha_OutputConfig_resize_sinks(envoy_service_tap_v2alpha_OutputConfig *msg, size_t len, upb_arena *arena) {
  return (envoy_service_tap_v2alpha_OutputSink**)_upb_array_resize_accessor2(msg, UPB_SIZE(12, 24), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct envoy_service_tap_v2alpha_OutputSink* envoy_service_tap_v2alpha_OutputConfig_add_sinks(envoy_service_tap_v2alpha_OutputConfig *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_OutputSink* sub = (struct envoy_service_tap_v2alpha_OutputSink*)_upb_msg_new(&envoy_service_tap_v2alpha_OutputSink_msginit, arena);
  bool ok = _upb_array_append_accessor2(
      msg, UPB_SIZE(12, 24), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_OutputConfig_set_max_buffered_rx_bytes(envoy_service_tap_v2alpha_OutputConfig *msg, struct google_protobuf_UInt32Value* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_UInt32Value*) = value;
}
UPB_INLINE struct google_protobuf_UInt32Value* envoy_service_tap_v2alpha_OutputConfig_mutable_max_buffered_rx_bytes(envoy_service_tap_v2alpha_OutputConfig *msg, upb_arena *arena) {
  struct google_protobuf_UInt32Value* sub = (struct google_protobuf_UInt32Value*)envoy_service_tap_v2alpha_OutputConfig_max_buffered_rx_bytes(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_UInt32Value*)_upb_msg_new(&google_protobuf_UInt32Value_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_OutputConfig_set_max_buffered_rx_bytes(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_OutputConfig_set_max_buffered_tx_bytes(envoy_service_tap_v2alpha_OutputConfig *msg, struct google_protobuf_UInt32Value* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_UInt32Value*) = value;
}
UPB_INLINE struct google_protobuf_UInt32Value* envoy_service_tap_v2alpha_OutputConfig_mutable_max_buffered_tx_bytes(envoy_service_tap_v2alpha_OutputConfig *msg, upb_arena *arena) {
  struct google_protobuf_UInt32Value* sub = (struct google_protobuf_UInt32Value*)envoy_service_tap_v2alpha_OutputConfig_max_buffered_tx_bytes(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_UInt32Value*)_upb_msg_new(&google_protobuf_UInt32Value_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_OutputConfig_set_max_buffered_tx_bytes(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_OutputConfig_set_streaming(envoy_service_tap_v2alpha_OutputConfig *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool) = value;
}

/* envoy.service.tap.v2alpha.OutputSink */

UPB_INLINE envoy_service_tap_v2alpha_OutputSink *envoy_service_tap_v2alpha_OutputSink_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_OutputSink *)_upb_msg_new(&envoy_service_tap_v2alpha_OutputSink_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_OutputSink *envoy_service_tap_v2alpha_OutputSink_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_OutputSink *ret = envoy_service_tap_v2alpha_OutputSink_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_OutputSink_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_OutputSink *envoy_service_tap_v2alpha_OutputSink_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_OutputSink *ret = envoy_service_tap_v2alpha_OutputSink_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_OutputSink_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_OutputSink_serialize(const envoy_service_tap_v2alpha_OutputSink *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_OutputSink_msginit, arena, len);
}

typedef enum {
  envoy_service_tap_v2alpha_OutputSink_output_sink_type_streaming_admin = 2,
  envoy_service_tap_v2alpha_OutputSink_output_sink_type_file_per_tap = 3,
  envoy_service_tap_v2alpha_OutputSink_output_sink_type_streaming_grpc = 4,
  envoy_service_tap_v2alpha_OutputSink_output_sink_type_NOT_SET = 0
} envoy_service_tap_v2alpha_OutputSink_output_sink_type_oneofcases;
UPB_INLINE envoy_service_tap_v2alpha_OutputSink_output_sink_type_oneofcases envoy_service_tap_v2alpha_OutputSink_output_sink_type_case(const envoy_service_tap_v2alpha_OutputSink* msg) { return (envoy_service_tap_v2alpha_OutputSink_output_sink_type_oneofcases)*UPB_PTR_AT(msg, UPB_SIZE(8, 16), int32_t); }

UPB_INLINE int32_t envoy_service_tap_v2alpha_OutputSink_format(const envoy_service_tap_v2alpha_OutputSink *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int32_t); }
UPB_INLINE bool envoy_service_tap_v2alpha_OutputSink_has_streaming_admin(const envoy_service_tap_v2alpha_OutputSink *msg) { return _upb_getoneofcase(msg, UPB_SIZE(8, 16)) == 2; }
UPB_INLINE const envoy_service_tap_v2alpha_StreamingAdminSink* envoy_service_tap_v2alpha_OutputSink_streaming_admin(const envoy_service_tap_v2alpha_OutputSink *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_StreamingAdminSink*, UPB_SIZE(4, 8), UPB_SIZE(8, 16), 2, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_OutputSink_has_file_per_tap(const envoy_service_tap_v2alpha_OutputSink *msg) { return _upb_getoneofcase(msg, UPB_SIZE(8, 16)) == 3; }
UPB_INLINE const envoy_service_tap_v2alpha_FilePerTapSink* envoy_service_tap_v2alpha_OutputSink_file_per_tap(const envoy_service_tap_v2alpha_OutputSink *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_FilePerTapSink*, UPB_SIZE(4, 8), UPB_SIZE(8, 16), 3, NULL); }
UPB_INLINE bool envoy_service_tap_v2alpha_OutputSink_has_streaming_grpc(const envoy_service_tap_v2alpha_OutputSink *msg) { return _upb_getoneofcase(msg, UPB_SIZE(8, 16)) == 4; }
UPB_INLINE const envoy_service_tap_v2alpha_StreamingGrpcSink* envoy_service_tap_v2alpha_OutputSink_streaming_grpc(const envoy_service_tap_v2alpha_OutputSink *msg) { return UPB_READ_ONEOF(msg, const envoy_service_tap_v2alpha_StreamingGrpcSink*, UPB_SIZE(4, 8), UPB_SIZE(8, 16), 4, NULL); }

UPB_INLINE void envoy_service_tap_v2alpha_OutputSink_set_format(envoy_service_tap_v2alpha_OutputSink *msg, int32_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int32_t) = value;
}
UPB_INLINE void envoy_service_tap_v2alpha_OutputSink_set_streaming_admin(envoy_service_tap_v2alpha_OutputSink *msg, envoy_service_tap_v2alpha_StreamingAdminSink* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_StreamingAdminSink*, UPB_SIZE(4, 8), value, UPB_SIZE(8, 16), 2);
}
UPB_INLINE struct envoy_service_tap_v2alpha_StreamingAdminSink* envoy_service_tap_v2alpha_OutputSink_mutable_streaming_admin(envoy_service_tap_v2alpha_OutputSink *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_StreamingAdminSink* sub = (struct envoy_service_tap_v2alpha_StreamingAdminSink*)envoy_service_tap_v2alpha_OutputSink_streaming_admin(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_StreamingAdminSink*)_upb_msg_new(&envoy_service_tap_v2alpha_StreamingAdminSink_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_OutputSink_set_streaming_admin(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_OutputSink_set_file_per_tap(envoy_service_tap_v2alpha_OutputSink *msg, envoy_service_tap_v2alpha_FilePerTapSink* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_FilePerTapSink*, UPB_SIZE(4, 8), value, UPB_SIZE(8, 16), 3);
}
UPB_INLINE struct envoy_service_tap_v2alpha_FilePerTapSink* envoy_service_tap_v2alpha_OutputSink_mutable_file_per_tap(envoy_service_tap_v2alpha_OutputSink *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_FilePerTapSink* sub = (struct envoy_service_tap_v2alpha_FilePerTapSink*)envoy_service_tap_v2alpha_OutputSink_file_per_tap(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_FilePerTapSink*)_upb_msg_new(&envoy_service_tap_v2alpha_FilePerTapSink_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_OutputSink_set_file_per_tap(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_OutputSink_set_streaming_grpc(envoy_service_tap_v2alpha_OutputSink *msg, envoy_service_tap_v2alpha_StreamingGrpcSink* value) {
  UPB_WRITE_ONEOF(msg, envoy_service_tap_v2alpha_StreamingGrpcSink*, UPB_SIZE(4, 8), value, UPB_SIZE(8, 16), 4);
}
UPB_INLINE struct envoy_service_tap_v2alpha_StreamingGrpcSink* envoy_service_tap_v2alpha_OutputSink_mutable_streaming_grpc(envoy_service_tap_v2alpha_OutputSink *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_StreamingGrpcSink* sub = (struct envoy_service_tap_v2alpha_StreamingGrpcSink*)envoy_service_tap_v2alpha_OutputSink_streaming_grpc(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_StreamingGrpcSink*)_upb_msg_new(&envoy_service_tap_v2alpha_StreamingGrpcSink_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_OutputSink_set_streaming_grpc(msg, sub);
  }
  return sub;
}

/* envoy.service.tap.v2alpha.StreamingAdminSink */

UPB_INLINE envoy_service_tap_v2alpha_StreamingAdminSink *envoy_service_tap_v2alpha_StreamingAdminSink_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_StreamingAdminSink *)_upb_msg_new(&envoy_service_tap_v2alpha_StreamingAdminSink_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_StreamingAdminSink *envoy_service_tap_v2alpha_StreamingAdminSink_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamingAdminSink *ret = envoy_service_tap_v2alpha_StreamingAdminSink_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamingAdminSink_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_StreamingAdminSink *envoy_service_tap_v2alpha_StreamingAdminSink_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamingAdminSink *ret = envoy_service_tap_v2alpha_StreamingAdminSink_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamingAdminSink_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_StreamingAdminSink_serialize(const envoy_service_tap_v2alpha_StreamingAdminSink *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_StreamingAdminSink_msginit, arena, len);
}



/* envoy.service.tap.v2alpha.FilePerTapSink */

UPB_INLINE envoy_service_tap_v2alpha_FilePerTapSink *envoy_service_tap_v2alpha_FilePerTapSink_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_FilePerTapSink *)_upb_msg_new(&envoy_service_tap_v2alpha_FilePerTapSink_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_FilePerTapSink *envoy_service_tap_v2alpha_FilePerTapSink_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_FilePerTapSink *ret = envoy_service_tap_v2alpha_FilePerTapSink_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_FilePerTapSink_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_FilePerTapSink *envoy_service_tap_v2alpha_FilePerTapSink_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_FilePerTapSink *ret = envoy_service_tap_v2alpha_FilePerTapSink_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_FilePerTapSink_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_FilePerTapSink_serialize(const envoy_service_tap_v2alpha_FilePerTapSink *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_FilePerTapSink_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_service_tap_v2alpha_FilePerTapSink_path_prefix(const envoy_service_tap_v2alpha_FilePerTapSink *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview); }

UPB_INLINE void envoy_service_tap_v2alpha_FilePerTapSink_set_path_prefix(envoy_service_tap_v2alpha_FilePerTapSink *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), upb_strview) = value;
}

/* envoy.service.tap.v2alpha.StreamingGrpcSink */

UPB_INLINE envoy_service_tap_v2alpha_StreamingGrpcSink *envoy_service_tap_v2alpha_StreamingGrpcSink_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_StreamingGrpcSink *)_upb_msg_new(&envoy_service_tap_v2alpha_StreamingGrpcSink_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_StreamingGrpcSink *envoy_service_tap_v2alpha_StreamingGrpcSink_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamingGrpcSink *ret = envoy_service_tap_v2alpha_StreamingGrpcSink_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamingGrpcSink_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_StreamingGrpcSink *envoy_service_tap_v2alpha_StreamingGrpcSink_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamingGrpcSink *ret = envoy_service_tap_v2alpha_StreamingGrpcSink_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamingGrpcSink_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_StreamingGrpcSink_serialize(const envoy_service_tap_v2alpha_StreamingGrpcSink *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_StreamingGrpcSink_msginit, arena, len);
}

UPB_INLINE upb_strview envoy_service_tap_v2alpha_StreamingGrpcSink_tap_id(const envoy_service_tap_v2alpha_StreamingGrpcSink *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }
UPB_INLINE bool envoy_service_tap_v2alpha_StreamingGrpcSink_has_grpc_service(const envoy_service_tap_v2alpha_StreamingGrpcSink *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_GrpcService* envoy_service_tap_v2alpha_StreamingGrpcSink_grpc_service(const envoy_service_tap_v2alpha_StreamingGrpcSink *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_GrpcService*); }

UPB_INLINE void envoy_service_tap_v2alpha_StreamingGrpcSink_set_tap_id(envoy_service_tap_v2alpha_StreamingGrpcSink *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}
UPB_INLINE void envoy_service_tap_v2alpha_StreamingGrpcSink_set_grpc_service(envoy_service_tap_v2alpha_StreamingGrpcSink *msg, struct envoy_api_v2_core_GrpcService* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_GrpcService*) = value;
}
UPB_INLINE struct envoy_api_v2_core_GrpcService* envoy_service_tap_v2alpha_StreamingGrpcSink_mutable_grpc_service(envoy_service_tap_v2alpha_StreamingGrpcSink *msg, upb_arena *arena) {
  struct envoy_api_v2_core_GrpcService* sub = (struct envoy_api_v2_core_GrpcService*)envoy_service_tap_v2alpha_StreamingGrpcSink_grpc_service(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_GrpcService*)_upb_msg_new(&envoy_api_v2_core_GrpcService_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_StreamingGrpcSink_set_grpc_service(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_service_tap_v2alpha_common_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_SERVICE_TAP_V2ALPHA_COMMON_PROTO_UPB_H_ */
