/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/service/tap/v2alpha/tap.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_SERVICE_TAP_V2ALPHA_TAP_PROTO_UPB_H_
#define ENVOY_SERVICE_TAP_V2ALPHA_TAP_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_service_tap_v2alpha_StreamTapsRequest;
struct envoy_service_tap_v2alpha_StreamTapsRequest_Identifier;
struct envoy_service_tap_v2alpha_StreamTapsResponse;
typedef struct envoy_service_tap_v2alpha_StreamTapsRequest envoy_service_tap_v2alpha_StreamTapsRequest;
typedef struct envoy_service_tap_v2alpha_StreamTapsRequest_Identifier envoy_service_tap_v2alpha_StreamTapsRequest_Identifier;
typedef struct envoy_service_tap_v2alpha_StreamTapsResponse envoy_service_tap_v2alpha_StreamTapsResponse;
extern const upb_msglayout envoy_service_tap_v2alpha_StreamTapsRequest_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_msginit;
extern const upb_msglayout envoy_service_tap_v2alpha_StreamTapsResponse_msginit;
struct envoy_api_v2_core_Node;
struct envoy_data_tap_v2alpha_TraceWrapper;
extern const upb_msglayout envoy_api_v2_core_Node_msginit;
extern const upb_msglayout envoy_data_tap_v2alpha_TraceWrapper_msginit;


/* envoy.service.tap.v2alpha.StreamTapsRequest */

UPB_INLINE envoy_service_tap_v2alpha_StreamTapsRequest *envoy_service_tap_v2alpha_StreamTapsRequest_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_StreamTapsRequest *)_upb_msg_new(&envoy_service_tap_v2alpha_StreamTapsRequest_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_StreamTapsRequest *envoy_service_tap_v2alpha_StreamTapsRequest_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamTapsRequest *ret = envoy_service_tap_v2alpha_StreamTapsRequest_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamTapsRequest_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_StreamTapsRequest *envoy_service_tap_v2alpha_StreamTapsRequest_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamTapsRequest *ret = envoy_service_tap_v2alpha_StreamTapsRequest_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamTapsRequest_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_StreamTapsRequest_serialize(const envoy_service_tap_v2alpha_StreamTapsRequest *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_StreamTapsRequest_msginit, arena, len);
}

UPB_INLINE bool envoy_service_tap_v2alpha_StreamTapsRequest_has_identifier(const envoy_service_tap_v2alpha_StreamTapsRequest *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const envoy_service_tap_v2alpha_StreamTapsRequest_Identifier* envoy_service_tap_v2alpha_StreamTapsRequest_identifier(const envoy_service_tap_v2alpha_StreamTapsRequest *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(16, 16), const envoy_service_tap_v2alpha_StreamTapsRequest_Identifier*); }
UPB_INLINE uint64_t envoy_service_tap_v2alpha_StreamTapsRequest_trace_id(const envoy_service_tap_v2alpha_StreamTapsRequest *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t); }
UPB_INLINE bool envoy_service_tap_v2alpha_StreamTapsRequest_has_trace(const envoy_service_tap_v2alpha_StreamTapsRequest *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct envoy_data_tap_v2alpha_TraceWrapper* envoy_service_tap_v2alpha_StreamTapsRequest_trace(const envoy_service_tap_v2alpha_StreamTapsRequest *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(20, 24), const struct envoy_data_tap_v2alpha_TraceWrapper*); }

UPB_INLINE void envoy_service_tap_v2alpha_StreamTapsRequest_set_identifier(envoy_service_tap_v2alpha_StreamTapsRequest *msg, envoy_service_tap_v2alpha_StreamTapsRequest_Identifier* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), envoy_service_tap_v2alpha_StreamTapsRequest_Identifier*) = value;
}
UPB_INLINE struct envoy_service_tap_v2alpha_StreamTapsRequest_Identifier* envoy_service_tap_v2alpha_StreamTapsRequest_mutable_identifier(envoy_service_tap_v2alpha_StreamTapsRequest *msg, upb_arena *arena) {
  struct envoy_service_tap_v2alpha_StreamTapsRequest_Identifier* sub = (struct envoy_service_tap_v2alpha_StreamTapsRequest_Identifier*)envoy_service_tap_v2alpha_StreamTapsRequest_identifier(msg);
  if (sub == NULL) {
    sub = (struct envoy_service_tap_v2alpha_StreamTapsRequest_Identifier*)_upb_msg_new(&envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_StreamTapsRequest_set_identifier(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_StreamTapsRequest_set_trace_id(envoy_service_tap_v2alpha_StreamTapsRequest *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t) = value;
}
UPB_INLINE void envoy_service_tap_v2alpha_StreamTapsRequest_set_trace(envoy_service_tap_v2alpha_StreamTapsRequest *msg, struct envoy_data_tap_v2alpha_TraceWrapper* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(20, 24), struct envoy_data_tap_v2alpha_TraceWrapper*) = value;
}
UPB_INLINE struct envoy_data_tap_v2alpha_TraceWrapper* envoy_service_tap_v2alpha_StreamTapsRequest_mutable_trace(envoy_service_tap_v2alpha_StreamTapsRequest *msg, upb_arena *arena) {
  struct envoy_data_tap_v2alpha_TraceWrapper* sub = (struct envoy_data_tap_v2alpha_TraceWrapper*)envoy_service_tap_v2alpha_StreamTapsRequest_trace(msg);
  if (sub == NULL) {
    sub = (struct envoy_data_tap_v2alpha_TraceWrapper*)_upb_msg_new(&envoy_data_tap_v2alpha_TraceWrapper_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_StreamTapsRequest_set_trace(msg, sub);
  }
  return sub;
}

/* envoy.service.tap.v2alpha.StreamTapsRequest.Identifier */

UPB_INLINE envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *)_upb_msg_new(&envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *ret = envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *ret = envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_serialize(const envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_msginit, arena, len);
}

UPB_INLINE bool envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_has_node(const envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct envoy_api_v2_core_Node* envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_node(const envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(12, 24), const struct envoy_api_v2_core_Node*); }
UPB_INLINE upb_strview envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_tap_id(const envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview); }

UPB_INLINE void envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_set_node(envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg, struct envoy_api_v2_core_Node* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(12, 24), struct envoy_api_v2_core_Node*) = value;
}
UPB_INLINE struct envoy_api_v2_core_Node* envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_mutable_node(envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg, upb_arena *arena) {
  struct envoy_api_v2_core_Node* sub = (struct envoy_api_v2_core_Node*)envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_node(msg);
  if (sub == NULL) {
    sub = (struct envoy_api_v2_core_Node*)_upb_msg_new(&envoy_api_v2_core_Node_msginit, arena);
    if (!sub) return NULL;
    envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_set_node(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_service_tap_v2alpha_StreamTapsRequest_Identifier_set_tap_id(envoy_service_tap_v2alpha_StreamTapsRequest_Identifier *msg, upb_strview value) {
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), upb_strview) = value;
}

/* envoy.service.tap.v2alpha.StreamTapsResponse */

UPB_INLINE envoy_service_tap_v2alpha_StreamTapsResponse *envoy_service_tap_v2alpha_StreamTapsResponse_new(upb_arena *arena) {
  return (envoy_service_tap_v2alpha_StreamTapsResponse *)_upb_msg_new(&envoy_service_tap_v2alpha_StreamTapsResponse_msginit, arena);
}
UPB_INLINE envoy_service_tap_v2alpha_StreamTapsResponse *envoy_service_tap_v2alpha_StreamTapsResponse_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamTapsResponse *ret = envoy_service_tap_v2alpha_StreamTapsResponse_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamTapsResponse_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_service_tap_v2alpha_StreamTapsResponse *envoy_service_tap_v2alpha_StreamTapsResponse_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_service_tap_v2alpha_StreamTapsResponse *ret = envoy_service_tap_v2alpha_StreamTapsResponse_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_service_tap_v2alpha_StreamTapsResponse_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_service_tap_v2alpha_StreamTapsResponse_serialize(const envoy_service_tap_v2alpha_StreamTapsResponse *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_service_tap_v2alpha_StreamTapsResponse_msginit, arena, len);
}



extern const upb_msglayout_file envoy_service_tap_v2alpha_tap_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_SERVICE_TAP_V2ALPHA_TAP_PROTO_UPB_H_ */
