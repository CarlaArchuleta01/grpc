/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     envoy/api/v2/core/backoff.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef ENVOY_API_V2_CORE_BACKOFF_PROTO_UPB_H_
#define ENVOY_API_V2_CORE_BACKOFF_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct envoy_api_v2_core_BackoffStrategy;
typedef struct envoy_api_v2_core_BackoffStrategy envoy_api_v2_core_BackoffStrategy;
extern const upb_msglayout envoy_api_v2_core_BackoffStrategy_msginit;
struct google_protobuf_Duration;
extern const upb_msglayout google_protobuf_Duration_msginit;


/* envoy.api.v2.core.BackoffStrategy */

UPB_INLINE envoy_api_v2_core_BackoffStrategy *envoy_api_v2_core_BackoffStrategy_new(upb_arena *arena) {
  return (envoy_api_v2_core_BackoffStrategy *)_upb_msg_new(&envoy_api_v2_core_BackoffStrategy_msginit, arena);
}
UPB_INLINE envoy_api_v2_core_BackoffStrategy *envoy_api_v2_core_BackoffStrategy_parse(const char *buf, size_t size,
                        upb_arena *arena) {
  envoy_api_v2_core_BackoffStrategy *ret = envoy_api_v2_core_BackoffStrategy_new(arena);
  if (!ret) return NULL;
  if (!upb_decode(buf, size, ret, &envoy_api_v2_core_BackoffStrategy_msginit, arena)) return NULL;
  return ret;
}
UPB_INLINE envoy_api_v2_core_BackoffStrategy *envoy_api_v2_core_BackoffStrategy_parse_ex(const char *buf, size_t size,
                           const upb_extreg *extreg, int options,
                           upb_arena *arena) {
  envoy_api_v2_core_BackoffStrategy *ret = envoy_api_v2_core_BackoffStrategy_new(arena);
  if (!ret) return NULL;
  if (!_upb_decode(buf, size, ret, &envoy_api_v2_core_BackoffStrategy_msginit, extreg, options, arena)) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char *envoy_api_v2_core_BackoffStrategy_serialize(const envoy_api_v2_core_BackoffStrategy *msg, upb_arena *arena, size_t *len) {
  return upb_encode(msg, &envoy_api_v2_core_BackoffStrategy_msginit, arena, len);
}

UPB_INLINE bool envoy_api_v2_core_BackoffStrategy_has_base_interval(const envoy_api_v2_core_BackoffStrategy *msg) { return _upb_hasbit(msg, 1); }
UPB_INLINE const struct google_protobuf_Duration* envoy_api_v2_core_BackoffStrategy_base_interval(const envoy_api_v2_core_BackoffStrategy *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(4, 8), const struct google_protobuf_Duration*); }
UPB_INLINE bool envoy_api_v2_core_BackoffStrategy_has_max_interval(const envoy_api_v2_core_BackoffStrategy *msg) { return _upb_hasbit(msg, 2); }
UPB_INLINE const struct google_protobuf_Duration* envoy_api_v2_core_BackoffStrategy_max_interval(const envoy_api_v2_core_BackoffStrategy *msg) { return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), const struct google_protobuf_Duration*); }

UPB_INLINE void envoy_api_v2_core_BackoffStrategy_set_base_interval(envoy_api_v2_core_BackoffStrategy *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(4, 8), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_api_v2_core_BackoffStrategy_mutable_base_interval(envoy_api_v2_core_BackoffStrategy *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_api_v2_core_BackoffStrategy_base_interval(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_api_v2_core_BackoffStrategy_set_base_interval(msg, sub);
  }
  return sub;
}
UPB_INLINE void envoy_api_v2_core_BackoffStrategy_set_max_interval(envoy_api_v2_core_BackoffStrategy *msg, struct google_protobuf_Duration* value) {
  _upb_sethas(msg, 2);
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), struct google_protobuf_Duration*) = value;
}
UPB_INLINE struct google_protobuf_Duration* envoy_api_v2_core_BackoffStrategy_mutable_max_interval(envoy_api_v2_core_BackoffStrategy *msg, upb_arena *arena) {
  struct google_protobuf_Duration* sub = (struct google_protobuf_Duration*)envoy_api_v2_core_BackoffStrategy_max_interval(msg);
  if (sub == NULL) {
    sub = (struct google_protobuf_Duration*)_upb_msg_new(&google_protobuf_Duration_msginit, arena);
    if (!sub) return NULL;
    envoy_api_v2_core_BackoffStrategy_set_max_interval(msg, sub);
  }
  return sub;
}

extern const upb_msglayout_file envoy_api_v2_core_backoff_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* ENVOY_API_V2_CORE_BACKOFF_PROTO_UPB_H_ */
